<?xml version="1.0" encoding="UTF-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0" xmlns:l="http://www.w3.org/1999/xlink">
<description>
    <title-info>
        <book-title>Python: Learn Python Regular Expressions FAST! - The Ultimate Crash Course to Learning the Basics of Python Regular Expressions In No Time (Python, Python ... Python Regular Expressions Books)</book-title>
        <author><nickname>Acodemy</nickname></author>
        <genre>antique</genre>
        <coverpage><image l:href="#img_0"/></coverpage>
        <lang>en</lang>
        </title-info>
    <document-info>
        <author><first-name/><last-name>Acodemy</last-name></author>
        <program-used>calibre 5.41.0</program-used>
        <date>30.4.2022</date>
        <id>07f7d180-310d-4722-b65d-22c660e06998</id>
        <version>1.0</version>
    </document-info>
    <publish-info>
        <year>2015</year></publish-info>
</description>
<body>
<section>
<p><strong>By Acodemy</strong></p>
<p>© Copyright 2015</p>
<empty-line/>
</section>
<section>
<empty-line/><empty-line/>
<p><strong>PYTHON REGULAR EXPRESSIONS</strong></p>
<p><strong>The ultimate crash course to learn Python Regular Expressions </strong><strong>FAST!</strong></p>
<empty-line/>
</section>
<section>
<empty-line/><empty-line/>
<p>Disclaimer</p>
<p> </p>
<p>The information provided in this book is designed to provide helpful information on the subjects discussed. The author’s books are only meant to provide the reader with the basics knowledge of a certain topic, without any warranties regarding whether the student will, or will not, be able to incorporate and apply all the information provided. Although the writer will make his best effort share his insights, learning is a difficult task and each person needs a different timeframe to fully incorporate a new topic. This book, nor any of the author’s books constitute a promise that the reader will learn a certain topic within a certain timeframe.</p>
<p><strong> </strong></p>
<p>All rights reserved. No part of this book may be reproduced or transmitted in any form or by any means without written permission from the author and publisher.</p>
<p>This book is written to guide those who are passionate to learn how to use Python Regular Expressions. It has been written to help those who intend to learn basic and complex tools of Python Regular Expressions.</p>
<empty-line/>
</section>
<section>
<empty-line/><empty-line/>
<p><strong>Table of Contents</strong></p>
<p> </p>
<p><strong>Chapter 1: Introduction to Regular expressions</strong></p>
<p> </p>
<p>Regular Expressions</p>
<p>History of regular expressions</p>
<p>Most important concepts related to regular expressions</p>
<p> </p>
<p><strong>Chapter 2: Regex with Python</strong></p>
<p> </p>
<p>A brief overview</p>
<p>Backslash in string literals</p>
<p>Building blocks for Python Regular Expressions</p>
<p>Module Operations</p>
<p> </p>
<p><strong>Chapter 3: </strong><strong>Literals, Character Classes</strong></p>
<p> </p>
<p>Escaped metacharacters in regexes</p>
<p>Character classes</p>
<p>Predefined character classes</p>
<p>Repeating things</p>
<p>Alternation</p>
<p> </p>
<p><strong>Chapter 4: Quantifiers and Boundary Matchers</strong></p>
<p> </p>
<p>Quantifiers</p>
<p>Greedy as well as reluctant quantifiers</p>
<p>Possessive Quantifiers</p>
<p>Boundary Matchers</p>
<p> </p>
<p><strong>Chapter 5: Special characters, module contents and </strong><strong>Regular Expression Objects</strong></p>
<p> </p>
<p>Module Contents</p>
<p>Regular Expression Objects</p>
<p> </p>
<p><strong>Chapter 6: Grouping</strong></p>
<p> </p>
<p>Expressions with Python</p>
<p>Backreferences</p>
<p>Named groups</p>
<p>Atomic groups</p>
<p>Specialized cases with groups</p>
<p> </p>
<p><strong>Chapter 7: Look Around</strong></p>
<p> </p>
<p>Look Ahead</p>
<p>Look Behind</p>
<p>Look around and groups</p>
<p> </p>
<p><strong>Chapter 8: Measuring performance of regexes</strong></p>
<p> </p>
<p>The RegexBuddy Tool</p>
<p>Going through the Python regular expression engine</p>
<p>Backtracking</p>
<p>Recommendations for Optimization</p>
<p>Extraction of general portions in alternation</p>
<p>Shortcut to alternation</p>
<p>Be specific</p>
<p>Not being greedy</p>
<p> </p>
<p><strong>Chapter 9: Comparison of Python regular expressions</strong></p>
<p> </p>
<p>Comparison between python and others</p>
<p>What is different in the third version of Python?</p>
<p> </p>
<p><strong>Chapter 10: </strong><strong>Common Python Regular Expression Mistakes</strong></p>
<p> </p>
<p>Not employing the DOTALL flag while finding multi-line strings</p>
<p>Not employing the MULTILINE flag while finding multi-line strings</p>
<p>Not making repetitions non-greedy</p>
<p>Making searches case-sensitive</p>
<p>Not compiling regexes</p>
<p> </p>
<p><strong>Chapter 11: Regular Expression Examples</strong></p>
<p> </p>
<p>search() and match() comparison</p>
<p>Creating a Phonebook</p>
<p>Data Munging</p>
<p>Discovering all Adverbs</p>
<p>Discovering all Adverbs and their Locations</p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 1: Introduction to Regular expressions</strong></p>
<p> </p>
<p><strong>Chapter Objective:</strong></p>
<p>The main objective of this chapter is to make the readers familiar with what a regular expression is. The chapter covers most of the basic concepts related to regular expressions. First of all, a basic explanation of regulation expressions is given and then the history so that the reader has an idea of how regular expressions evolved with time and their importance in the present scenario. The next part gives an overview of the most basic terms related to regular expressions like literal characters, character classes, back references, etc. In the end, an exercise to test what the reader has gained from the chapter has been given.</p>
<p> </p>
</section>
<section>
<p>
<strong>Regular expressions meaning</strong></p>
<p>Regular expressions are also termed as regexes, REs or regex patterns. They are basically a minute, extremely specialized programming language implanted inside Python and the re module is used for making them available. By employing this tiny language, you specify the rules for the probable strings set which you wish to match. Such a set can contain e-mail addresses, English sentences, or TeX commands, or whatever you wish. You may then ask questions like “Is this string matching the</p>
<p>Pattern?” You may also employ Regular Expressions for modifying a string or splitting it apart in a variety of ways.</p>
<p>RE patterns have been compiled into a sequence of bytecodes. The execution of the byte code takes place by a matching engine that is written in C language. It might be required to give precise attention to how the engine will be executing a particular Regular Expression, and write the Regular Expression in a particular way for creating to bytecode which runs faster.</p>
<p>REs can be considered as text patters describing the form string of text should possess. A number of functions can be accomplished by employing regular expressions. The chief among them being the following:</p>
<p>Find out particular pattern appearance in a specific text. To exemplify, it is possible to examine whether a word “hard” is present in a document by employing only one scan.</p>
<p>Extraction of a particular part of a text. To exemplify, the extraction of a street number of any address.</p>
<p>Replacement of a particular part of text such as altering the color of a specific text to violet.</p>
<p>Breaking down a text in to chunks by employing a punctuation, etc.</p>
<p> </p>
</section>
<section>
<p>
<strong>History of regular expressions</strong></p>
<p> </p>
<p>Regular expressions gained fame in the late 1960s. The maiden appearances of Res in programming can be credited to develop Kleene's notation into the Quick Editor as a way to for matching various patterns in several text files. For speed, the implementation of regular expression was performed by using JIT to IBM 7094 code on the Compatible Time-Sharing System. Ken Thompson.</p>
<p>A comparatively more complex Res came into picture in Perl in the late 1980s. They were actually derived from a regex library. In the present scenario, Res are largely backed in text processing programs, programming languages and various other programs. Re back is an element of the standardized library of various programming languages which comprise Python, etc. and is created into the syntax of others which comprise Perl and ECMA Script. Employments of Re functionality are mostly known as a regular expression engine, and various libraries are there for reuse.</p>
<p>Res are universal. They are present in the most novice Javascript framework and can also be traced in the UNIX tools of the 1970s. Any modern programming language is incomplete if it does not back Res.</p>
<p>Though they are found in various languages, they are not found in the toolkit of the current coders. The difficult learning curve offered by them can be one of the causes of this. Being an expert in Res is not so easy and they are very complicated to read when not written appropriately.</p>
<p>Once you read this book, you will be able to learn the most competent practices while composing regular expressions to ease the reading procedure. Though Res are present in the newest and the most effective programming languages presently, their history can be traced back to 1943 when a logical calculus of the concepts existing in nervous activity was released by Warren McCulloch and Walter Pitts. This research was actually the starting point of the regular expressions and offered the maiden mathematical model of a neural network. In the year 1968, a renowned contributor of computer science (Ken Thompson) considered the findings of Kleene and further expanded it, publishing his works in the Regular Expression Search Algorithm titled paper. His contributions were not limited by just a single paper. He encompassed support for these Res in his version of Quick Editor.</p>
<p>Other remarkable milestones worth mentioning here are the issue of the maiden non-proprietary library of regex by Henry Spence and after that, the development of the Perl by famous computer science contributor, Larry Wall. The implementation in Perl was taken to another step and contributed a number of modifications to the actual RE syntax thereby making the famous Perl flavor. A number of the implementations that followed in other languages or tools are depended on the Perl flavor of Re.</p>
<p>The well-known Jargon file mentions them as regex, reg-ex and regexp.  Though there is not a very authoritarian approach of naming Res, they are basically based on formal languages which imply that everything has to be appropriate and exact. A variety of the current implementations back features which cannot be represented in formal languages and hence they cannot be considered as real Res.  All the pre-mentioned terms (regex, reg-ex and regexp, REs, Regular expressions will be used as synonyms in this book.</p>
<p> </p>
</section>
<section>
<p>
<strong>Most important concepts related to regular expressions</strong></p>
<p>  
   <strong>Literal Characters</strong></p>
<p>The most basic regex comprises of a single literal character. It matches the first occurrence of that character in the string. The maiden occurrence of the string character is mapped by it. For example, consider a string Jam is Sweet. In this case, the ‘ a’ after the J will be matched by the regular expression.</p>
<p> </p>
<p><strong>Character classes</strong></p>
<p>The “character class” is employed for telling the regex engine that it needs to match a single character among a group of characters. In order to match a character that you want to be matched, just put it inside square brackets. Suppose you wish to match an o or an e, you will use [oe]. It is extremely helpful when you are not sure if the document you are looking for has been created in British or English style.</p>
<p>Only one character is matched by it. For example, pr[ae]y will not match praay, praey or any similar characters. For a character class, it does not take into consideration what the order of the characters is and the outcome is the same. A hyphen can be employed in a character class for specifying a particular character set. [0-20] will provide the matching of a digit that ranges in between 0 to 9.</p>
<p>Character class is a feature of regular expressions that has the maximum usage.  A word can be searched even though it is not spelled correctly like pr[ae]y.</p>
<p> </p>
<p><strong>Dot</strong></p>
<p>The dot also known as period is a very well-known metacharacter. Unluckily, it has a very high chances of being misused. The function of the dot is to match a character not taking into consideration what is actually is. Only the line break characters are not matched by it.</p>
<p> </p>
<p><strong>Anchors</strong></p>
<p>Anchors function by matching a particular position that lies either before or after or between characters instead of matching any specific character. They can be employed for anchoring the regular expression match at a specific location. Special character ^is used for matching a location that is just before the maiden character in the string. For example, if you apply ^d to dec, it matches d.</p>
<p> </p>
<p><strong>Word Boundaries</strong></p>
<p>The \b is a metcharacter that is employed for matching a location termed as word boundary. Such a match is 0-length.</p>
<p>The following are the three different locations in order to be considered as word boundaries</p>
<p>· In case the first character is a word character, the location qualifying as a word boundary is before it</p>
<p>· In case the last character is a word character, the location qualifying as a word boundary is after it.</p>
<p>· The location of the word boundary is in between 2 string characters wherein the first is a word character whereas the second one is not so.</p>
<p> </p>
<p><strong>Alternation</strong></p>
<p>Alternation is employed for matching a particular regular expression among a group of various probable regex. For example, if you wish to find the text mouse or fish, separate these two by using a pipe symbol. Among all the regular expression operators, alternation has the least priority. This means that it directs the regular expression engine that it has to match either to the right or left of the vertical bar. You must employ parenthesis in order to group in case you wish to limit the extent to which the alternation will reach.</p>
<p> </p>
<p><strong>Repetition operator</strong></p>
<p>There are three main repetition operators: question mark, star and asterisk. The preceding token in the regex is made elective by using question mark. For example flavour will match both flavor and flavour. Hence a number of tokens can be made optional by placing them together with the help of parenthesis and putting the question mark. For example Sept(ember)? Will match Sept as well as September.  The asterisk or star commands the regex engine to try to match the former token either zero or multiple times.</p>
<p> </p>
<p><strong>Using parenthesis</strong></p>
<p>A portion of a regex can be<strong> grouped </strong>together by getting it placed inside parenthesis or round brackets. It will enable you to use a quantifier for the whole group or to limit alternation to a particular portion of the regular expression. For <strong>grouping</strong> only parenthesis can be put into use. <strong>‘[]’brackets</strong> describe a character class whereas <strong>‘{}’ brackets</strong> are employed by a quantifier with particular limits.</p>
<p> </p>
<p><strong>Back references</strong></p>
<p>They are employed for matching the text that has been earlier matched by a capturing group. Suppose you wish to match a pair of opening as well as closing HTML tags as well as the text in them.  The tag’s name can be used again by placing the opening tag into a back reference.</p>
<p> </p>
<p><strong>Named capturing groups:</strong></p>
<p>Almost all the regex engines back numbered capturing groups. Lengthy regex with several groups back references are difficult to read. They might be specifically hard to maintain since the addition or elimination of a capturing group in the regular expression’s middle disappoints the counts of all the groups following the added or the eliminated group.</p>
<p>The re module of python is the maiden one providing a solution in terms of named back references as well as named capturing groups. The group’s match is captured by (?P&lt;name&gt;group) in the “name” back reference. It is necessary that the name should be an alphanumeric arrangement that begins with a letter whereas group could be any regex. The group’s matter might be referenced with the named back reference that is (?P=name). All the three things inside the bracket are the syntax’s part.  Even though the named back references employ parenthesis, this is simply a back reference wherein no grouping is done.</p>
<p> </p>
<p><strong>Free spacing regex:</strong></p>
<p>The whitespacing between regex tokens is ignored in the free-spacing mode. The Whitespace comprises of tabs, spaces as well as line breaks. d e f means the same as def in free-spacing mode, whereas \ d and \d cannot be considered as the same. The first one matches d whereas the second matches a digit. \d is a single regex token composed of a backslash and a "d". Breaking up the token with a space gives you an escaped space (which matches a space), and a literal "d". Only one regular expression token is represented by \d but splitting the token with a space offers you an extra space as well as a literal “d”.</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, you should have able to know what a regular expression is how it came into picture and the basics related to it. To revise: Regular expressions are basically a minute, extremely specialized programming language implanted inside Python and the re module is used for making them available. They are also termed as regexes, REs or regex patterns. A literal character matches the first occurrence of that character in the string. The other important terms related to regular expressions are: special characters, dot, anchors, back references, word boundaries, etc. You must have been familiar with all these by now.</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>The execution of the byte code takes place by a matching engine. Choose the language in which this matching engine is written.</p>
<p>a) C</p>
<p>b) C++</p>
<p>c) Java</p>
<p>d) None</p>
<p>The correct answer is (a) 
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>Who among the following released the first non-proprietary library of regex?</p>
<p>a) Henry Space</p>
<p>b) Larry Wall</p>
<p>c) Ken Thompson</p>
<p>d) None</p>
<p>  The correct answer is (a) 
   <strong><emphasis>Exercise 3</emphasis></strong> 
   <strong>By applying ^d to dec, which one among the following is matched?</strong></p>
<p>a) e</p>
<p>b) d</p>
<p>c) c</p>
<p>d) None</p>
<p>The correct answer is (b) 
   <strong><emphasis>Exercise 4</emphasis></strong></p>
<p>Which one among the following has the function of matching a character not taking into consideration what is actually is?</p>
<p>a) anchor</p>
<p>b) dot</p>
<p>The correct answer is (b) 
   <strong><emphasis>Exercise 5</emphasis></strong></p>
<p>Nov and ember will be matched by using which one among the following?</p>
<p>a) Nov(ember)</p>
<p>b) Nov(ember)?</p>
<p>The correct answer is (b) 
   <strong><emphasis>Exercise 6</emphasis></strong></p>
<p>\ d will imply</p>
<p>a) d</p>
<p>b) a digit</p>
<p>The correct answer is (a)</p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 2: Regex with Python</strong></p>
<p> </p>
<p><strong>Chapter Objective:</strong></p>
<p>In the first chapter, we've had an overview of the basics related to regular expressions. In the second chapter you will have an understanding of the various operations offered by Python and how the regular expression is handled by python. To accomplish that, we will notice the twists of Python while handling Res, the various string types, the Application Program Interface it provides via the MatchObject and RegexObject classes, each task which can be achieved with them in detail and some issues generally encountered by users.</p>
<p> </p>
<p><strong>A brief overview</strong></p>
<p>As version 1.5, Python offers a Perl-style regex with a few intelligent exceptions which we encounter afterwards, patterns and strings that are to be found may be 8 bit or Unicode strings.</p>
<p> </p>
<p><strong>Tip</strong></p>
<p>Unicode is employed to denote the living characters of the word as well as important scripts. It might be imagined as a calibration between code points and characters. Therefore any character can be denoted irrespective of its language with a single number.</p>
<p>Res are backed by the re module. Therefore, similar to other modules in Python, it is only required to import it to begin playing with them. In order to do that, you require to begin the Python interactive shell by employing this code:</p>
<p>&gt; &gt; &gt; import re</p>
<p>After you have done this, you may start attempting to match any pattern. In order to accomplish that, you require the compilation of a pattern, converting it into bytecode, as described below. The execution of the bytecode takes place afterwards in an engine that is programmed in C programming language.</p>
<p>&gt; &gt; &gt; pattern = re.compile( r'\ bfoo\ b')</p>
<p> </p>
<p><strong>Tip</strong></p>
<p>Bytecode is the output that is produced by programming languages that would be afterwards understood by an interpreter. It can be considered as an intermediate language. The most apt illustration is the Java bytecode interpreted by JVM.  After the compilation of the pattern, it can be compared with a string, this is explained below:</p>
<p>&gt; &gt; &gt; pattern.match(" foo bar")</p>
<p>&lt; _sre.SRE_Match at</p>
<p>0x108acac60 &gt;</p>
<p>In the example given, the compilation of a pattern takes place and after that it is found if the matching of the pattern takes place with the text foo bar. It becomes very simple to carry out rapid tests while dealing with Python and regex in the command line. You simply have to begin the python interpreter and carry out the importing of the re module as described in the above paragraphs. But, if you wish a Graphical User Interface to examine your Regular expression, you may carry out download written in the Python language by using the link given below:</p>
<p>http:// svn.python.org/ view/* checkout*/ python/ trunk/ Tools/ scripts/ redemo.py? content-type = text% 2Fplain</p>
<p>Various tools as well as desktop programs are available. They will be covered at some point in the coming chapters. For now, it is advisable to employ the interpreter for gaining fluency with them</p>
<p> </p>
<p><strong>Backslash in string literals</strong></p>
<p>Res aren't a portion of the main Python language. Hence, there isn't a particular syntax for them and so they are dealt as any other string. The backslash character \ is employed to show metacharacters in Res. The backslash is also employed in strings for escaping particular characters. This implies that it has a distinct meaning in Python. Therefore, if we require to employ the backlash character, we have to escape it: \\. By doing so, the backlash is given the meaning of string literal. Though, for matching inside a regex, the backlashes should be escaped by efficiently writing 4 back slashes. To exemplify, a regex is written for matching \:</p>
<p>&gt; &gt; &gt; pattern = re.compile("\\\\") &gt; &gt; &gt;</p>
<p>pattern.match("\\ author")</p>
<p>&lt; _sre.SRE_Match at 0x104a88e68 &gt;</p>
<p>Since it can be seen, it is dull and not so easy for understanding in case the pattern is lengthy.</p>
<p>Python offers the string notation r. These raw string notation enable the backslashes to be considered as usual characters. Therefore, r"\ c" is not the backspace and represents the characters \ and c. This goes in a similar way for r"\n". The versions of python (2 and 3), deal with strings in a dissimilar manner. The 2.x version of python offers 2 strings types: eight-bit as well as Unicode; whereas the 3.x version of comprise of text and binary data. Text is mostly Unicode and the encoded Unicode is denoted as binary data. Strings have particular notation to show which type is employed.</p>
<p> </p>
<p>Type</p>
<p>Explanation</p>
<p>String</p>
<p>String literals have been encoded automatically by employing the default encoding.  The / is required to escape meaning characters.</p>
<p>Raw string</p>
<p>They are equivalent to literal strings with the exclusion of the backslashes which are considered as normal characters</p>
<p>Unicode Raw string</p>
<p>They are Unicode strings though they are considered as normal raw strings.</p>
<p> </p>
<p><strong>Building blocks for Python Regular Expressions:</strong></p>
<p>There are two distinct objects in python for handling regular expressions. One is known as RegexObject <strong>.</strong>It denotes a compiled regex and is also called Pattern Object. The second one denotes the matched pattern and is termed as MatchObject.</p>
<p> </p>
<p><strong>RegexObject</strong></p>
<p>If we want to start matching patterns, we need the regular expression compilation. Python offers us an interface to achieve so. The outcome is a RegexObject. The RegexObject object has various methods for special operations on regex. The re module offers a shorthand for each task in order to enable us to ignore the compilation of it.</p>
<p>&gt; &gt; &gt; pattern = re.compile( r'fo +')</p>
<p>After compiling a regex, a recyclable pattern object is produced that offers all the operations which can be achieved like finding all substrings which match a specific regular expression, etc. Therefore, to exemplify, if we wish to know whether a string begins with &lt;HTML&gt;, we may employ the code given below:</p>
<p>&gt; &gt; &gt; pattern = re.compile( r' &lt; HTML &gt;')</p>
<p>&gt; &gt; &gt; pattern.match("&lt; HTML &gt;")</p>
<p>&lt; _sre.SRE_Match at 0x108076578</p>
<p>For the execution of tasks and matching patterns, there are two methods concerned with regex. You may either employ the compilation of a pattern that provides us a RegexObject or may employ the module operations.  These two are compared in the example given below:</p>
<p>&gt; &gt; &gt; pattern = re.compile( r' &lt; HTML &gt;')</p>
<p>&gt; &gt; &gt; pattern.match("&lt; HTML &gt;")</p>
<p>On the contrary, you may straightforwardly carry out the operation on the module by employing the line of code given below:</p>
<p>&gt; &gt; &gt; re.match( r' &lt; HTML &gt;', "&lt; HTML &gt;")</p>
<p>The re module offers a wrapper for each task in the RegexObject. These may appear as shortcuts. Such wrappers produce the RegexObject , internally and after that call the apt method. You could be speculating if each time you are calling one of these wrappers it results in the compilation of the regex first. Well, the answer to this is no. The complied pattern is not cached, hence for the future calls this need not carry out the compilation again. Be careful of the memory requirements of your program. While you're employing module tasks, you are not controlling the cache, and therefore you may end up with a very high memory usage. You might always employ re.purge for clearing the cache though this is a compromise with performance. By the compilation of patterns, you are enabled to have a better control of the memory usage since you may choose the right time of purging them. There are a few distinctions for both ways but. It becomes possible to restrict the area wherein the pattern might be searched with the RegexObject; to exemplify restrict the search of a pattern that lies between the characters at index 3 and 30.Additionally, you may fix flags in each call by employing tasks in the module. Though, be cautious; each time you alter the flag, a novice pattern would be assembled and cached.</p>
<p>Let us consider the most significant tasks that could be accomplished with a pattern object.</p>
<p> </p>
<p><strong>Searching</strong></p>
<p>It is to be noted that the programming language python has two operations, match and search; most of the programming languages have one operation. Such a method makes an attempt to match the pattern that has been compiled at the starting of the string. A MatchObject is returned in case there is a suitable string. Hence, to exemplify, let's make an attempt to match if a string begins with &lt;HTML&gt;:</p>
<p>&lt; &gt; &gt; &gt; pattern = re.compile( r' &lt; HTML &gt;')</p>
<p>&gt; &gt; &gt; pattern.match(" &lt; HTML &gt;&lt; head &gt;")</p>
<p>&lt; _sre.SRE_Match at 0x108076578 &gt;</p>
<p>In the above example, the compilation of the pattern takes place first of all and after that a match is discovered in the &lt; HTML &gt; &lt; head &gt; string. Now, we will see what the outcome is in case the string doesn't begin with &lt; HTML&gt;, as described in the code lines below:</p>
<p>&gt; &gt; &gt; pattern.match("⇢ &lt; HTML &gt;") None</p>
<p>You can notice that there is no match. Match attempts to match at the starting of the string. Contrary to the pattern, the string begins with a whitespace. The distinction with search can be illustrated in the example given below:</p>
<p>&gt; &gt; &gt; pattern.search("⇢ &lt; HTML &gt;")</p>
<p>&lt; _sre.SRE_Match at 0x108076578 &gt;</p>
<p>As estimated, we get a match. The  pos parameter tells where to begin searching, as described in the following code:</p>
<p>&gt; &gt; &gt; pattern = re.compile( r' &lt; HTML &gt;')</p>
<p>&gt; &gt; &gt; pattern.match("⇢ ⇢ ⇢&lt; HTML &gt;") None</p>
<p>&gt; &gt; &gt; pattern.match("⇢ ⇢⇢ &lt; HTML &gt;", 3)</p>
<p>&lt; _sre.SRE_Match at 0x1043bc890 &gt;</p>
<p>In the underlined code, we may see the way the pattern has got a match even if there are three whitespaces in the string. This is so since we've set pos to three, therefore the match operation begins to search in that location.</p>
<p>The characters ^ and $ show the beginning and end of the string. You may not find them in the strings or write them, though they are always present and are legal characters for the regular expression engine. Note the distinct result when we slice the string 3 positions, as given in the code below:</p>
<p>&gt; &gt; &gt; pattern.match("⇢ ⇢ ⇢&lt; HTML &gt;"[ 3:])</p>
<p>&lt; _sre.SRE_Match at 0x1043bca98</p>
<p>The slice provides us a novice string; hence, it consists of a ^ metacharacter in it. On the other hand, pos simply move the index to the beginning point for the search in the string.</p>
<p> </p>
<p><strong>Modifying the string:</strong></p>
<p>There are a number of operations in order to alter strings like an operation for the division of the string and others for swapping some portions of it.</p>
<p>split( string, maxsplit = 0)</p>
<p>You may figure out the split operation in most of the programming languages. The main distinction is that the split in the re module has greater strength as a result of which you may use a regular expression. Therefore, in this case, the string is divided depending on the pattern matches.</p>
<p>Let’s try to understand this furthermore by employing an example, therefore let's fragment a string into lines:</p>
<p>&gt; &gt; &gt; re.split( r"\ n",</p>
<p>"Ugly⇢is worse⇢than⇢beautiful.\ Implicit⇢is⇢worse⇢than⇢explicit.")</p>
<p>[' Ugly⇢is⇢worse⇢than⇢beautiful.',Implicit⇢is⇢worse⇢than⇢explicit.']</p>
<p>In the above example, the match is \n; hence, the string is divided by employing it as the separator.</p>
<p>The ‘maxsplit’ parameter denotes the number of splits that can be achieved at maximum and returns the residual portion in the outcome:</p>
<p>&gt; &gt; &gt; pattern = re.compile( r"\ W")</p>
<p>&gt; &gt; &gt; pattern.split("Ugly is worse than beautiful", 2)</p>
<p>['Ugly, 'is', worse than beautiful]</p>
<p>As you can notice, just two words are divided and the other words are a portion of the outcome.</p>
<p> </p>
<p><strong>Match Object:</strong></p>
<p>This object denotes the matched pattern; you may get one each time you carry out one of the following operations:</p>
<p>Match</p>
<p>Search</p>
<p>finditer</p>
<p>Let's go through the most significant operations.</p>
<p> </p>
<p><strong>Group ([ group1, …])</strong></p>
<p>The group operation provides you the subdivisions of the match. When it's invoked without any argument or 0, it may return the entire match; whereas if 1 or more group identifiers are passed, the respective matches of the groups would be returned. Let's justify this by employing an example:</p>
<p>&gt; &gt; &gt; pattern = re.compile( r"(\ w +) (\ w +)")</p>
<p>&gt; &gt; &gt; match = pattern.search("Hi⇢ world")</p>
<p>In this case, the entire string’s pattern is matched and 2 groups are captured, Hi and world. After we are having the match, we may find the following real cases:</p>
<p>·         Without any arguments, the whole match is returned.</p>
<p>&gt; &gt; &gt; match.group()</p>
<p>'Hi⇢ world'</p>
<p>·         With group one greater than zero, the respective group is returned.</p>
<p>&gt; &gt; &gt; match.group( 1) 'i'</p>
<p>&gt; &gt; &gt; match.group( 2) 'world'</p>
<p>·         If there is no existence of the group, an IndexError will be given.</p>
<p>&gt; &gt; &gt; match.group( 4)</p>
<p>… IndexError: no such group</p>
<p>·         With more than one argument, the respective groups are returned.</p>
<p>&gt; &gt; &gt; match.group( 0, 2)</p>
<p>(' Hi⇢ world', 'world')</p>
<p>Here, we wish the entire pattern and the 2nd group, so we pass zero and two.</p>
<p>It is also possible to name the groups, we'll find it in detail in the coming chapter; there is a particular notation for it.</p>
<p>In case the pattern is having named groups, they might be accessed by employing either the names or the index:</p>
<p>&gt; &gt; &gt; pattern = re.compile( r"(? P &lt; one&gt;\ w +) (?P &lt; two&gt;\ w +)")</p>
<p>In the above example, a pattern has been compiled for the capturing of 2 groups: the first one has been named as one and the second one has been named as two.</p>
<p>&gt; &gt; &gt; match = pattern.search(" Hi⇢ world")</p>
<p>&gt; &gt; &gt; match.group('one) 'Hi'</p>
<p>Hence, we may figure out a group via its name. It is to be mentioned here that by employing named groups we may still figure out the groups via their index, as described in the code below:</p>
<p>&gt; &gt; &gt; match.group( 1) 'Hi'</p>
<p>We may employ both types:</p>
<p>&lt;&lt; match.group(0, ‘first’, 2)</p>
<p>(‘Hi⇢world’, ‘Hi’, ‘world’)</p>
<p> </p>
<p><strong>Groups ([default])</strong></p>
<p>The function of group is same as the preceding operation.  Though a tuple is returned here that has all the co-groups in the match rather than offering you a single or a few of the groups. Let’s understand this with an example explained in the preceding section.</p>
<p>&gt;&gt;&gt;pattern=re.compile (“(\w+) (\w+)”)</p>
<p>&gt;&gt;&gt; match=pattern.search (“Hi⇢world”)</p>
<p>&gt;&gt;&gt;match.groups()</p>
<p>(‘Hi’, ‘world’)</p>
<p>In the preceding section, there were 2 groups ‘Hi’ and ‘world’ and that is what is delivered to us by groups in the form of group (1, lastGroup)</p>
<p>When there are non-matching groups, there is a return of the default argument. In case the default argument has not been stated, then ‘None’ is employed. To exemplify:</p>
<p>&gt;&gt;&gt; pattern= re.compile (“(\w+) (\w+)?”)</p>
<p>Pattern.search(“Hi⇢”)</p>
<p>&gt;&gt;&gt;match.groups (“munda”)</p>
<p>(‘Hi’, ‘munda’)</p>
<p>&gt;&gt;&gt; match.groups ()</p>
<p>In the above example, the pattern is attempting to match 2 groups comprised of 1 or more alphanumeric characters. The 2nd one is optional; therefore we get only a single group with the string ‘Hi’. Once the match is obtained, <strong>groups</strong> are called with default that has been set to <strong>munda. </strong>Hence, the 2nd group is returned as <strong>munda.</strong></p>
<p> </p>
<p><strong>Start ([group])</strong></p>
<p>In some cases, it is helpful knowing the index where the matching of the pattern took place. Since with all the operations associated to groups, when the argument group is 0, then the operation functions with the entire string matched.</p>
<p>&gt;&gt;&gt;pattern=re.complie(r”(?P&lt;one&gt;\w+) (?P&lt;two&gt;\w+)?”)</p>
<p>&gt;&gt;&gt;match=pattern.search(“Hi⇢”)</p>
<p>&gt;&gt;&gt;match.start (1)</p>
<p>0</p>
<p>When there are groups having no match, then minus one is returned.</p>
<p>&gt;&gt;&gt;math=pattern.search(“Hi⇢”)</p>
<p>&gt;&gt;&gt;match..start (2)</p>
<p>-1</p>
<p> </p>
<p><strong>Groupdict([default])</strong></p>
<p>This method is employed in cases which employ named groups. A dictionary is returned by it with all the groups that are discovered.</p>
<p>&gt;&gt;&gt;pattern=re.complie(r”(?P&lt;one&gt;\w+) (?P&lt;two&gt;\w+)?”)</p>
<p>&gt;&gt;&gt;match=pattern.search(“Hi⇢”)</p>
<p>&gt;&gt;&gt;match.start (1)</p>
<p>2</p>
<p> </p>
<p><strong>Span([group])</strong></p>
<p>It is an operation that offers you a tuple with the values from start and end. This operation is often employed in text editors to find and highlight a search. The code given below exemplifies this operation.</p>
<p>&gt;&gt;&gt;pattern=re.compile (r”(?P&lt;one&gt;\w+) (?P&lt;two&gt;\w+)?”)</p>
<p>&gt;&gt;&gt;match=pattern.search(“Hi⇢”)</p>
<p>&gt;&gt;&gt;match.span(1)</p>
<p>(0, 2)</p>
<p> </p>
<p><strong>End([group])</strong></p>
<p>This behavior of this operation is almost similar to start. The only difference being that this operation returns the end of the substring which the group matches.</p>
<p>&gt;&gt;&gt;pattern=re.compile (r”(?P&lt;one&gt;\w+) (?P&lt;two&gt;\w+)?”)</p>
<p>&gt;&gt;&gt;match=pattern.search(“Hi⇢”)</p>
<p>&gt;&gt;&gt;match.end(1)</p>
<p>2</p>
<p> </p>
<p><strong>Module Operations:</strong></p>
<p>Let us go through two helpful operations:</p>
<p> </p>
<p><strong>Escape()</strong></p>
<p>This operation escapes the literals which might occur while carrying out an operation.</p>
<p> </p>
<p><strong>Purge()</strong></p>
<p>This operation is employed for purging the regex cache. It must be employed for freeing when the operations are employed through the module. It must be noticed that there exists a compromise with performance. When the cache is released, each pattern needs to be cached and compiled once again.</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, you must have had an understanding of the various operations offered by Python and how the regular expression is handled by python. You must have been able to figure out the twists of Python while handling Res, the various string types, the Application Program Interface it provides via the MatchObject and RegexObject classes, each task which can be achieved with them in detail and some issues generally encountered by users. We hope that this chapter would have contributed well for you to have a better exposure to using regular expressions with python.</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>The output that is produced by programming languages that would be afterwards understood by an interpreter is termed as __________</p>
<p>Answer: Bytecode</p>
<p>  
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>Choose the compilation flag that enables the writing of regex which are simpler to read and comprehend. To achieve this certain characters are handled in a specialized way.</p>
<p>a) re.LOCALE</p>
<p>b) re.VERBOSE</p>
<p>c) re.DEBUG</p>
<p>d) re.MULTILINE</p>
<p>The correct answer is (b)</p>
<p>  
   <strong><emphasis>Exercise 3</emphasis></strong></p>
<p>Choose the compilation flag that offers info about the pattern for compilation.</p>
<p>a) re.LOCALE</p>
<p>b) re.VERBOSE</p>
<p>c) re.DEBUG</p>
<p>d) re.MULTILINE</p>
<p>The correct answer is (c)</p>
<p>  
   <strong><emphasis>Exercise 4</emphasis></strong></p>
<p>Choose the compilation flag that is employed for altering the behavior of 2 metacharacters.</p>
<p>a) re.LOCALE</p>
<p>b) re.VERBOSE</p>
<p>c) re.DEBUG</p>
<p>d) re.MULTILINE</p>
<p>The correct answer is (d)</p>
<p>  
   <strong><emphasis>Exercise 5</emphasis></strong></p>
<p>Choose the compilation flag that is employed for matching the lower case as well as the upper case.</p>
<p>a) re.VERBOSE</p>
<p>b) re.DEBUG</p>
<p>c) re.MULTILINE</p>
<p>d) re.IGNORECASE</p>
<p>The correct answer is (d)</p>
<p>  
   <strong><emphasis>Exercise 6</emphasis></strong></p>
<p>Choose the metacharacter that is employed for matching the starting of the string and the starting of every novice line.</p>
<p>a) ^</p>
<p>b) $</p>
<p>The correct answer is (a)</p>
<p>  
   <strong><emphasis>Exercise 7</emphasis></strong></p>
<p>Choose the metacharacter that is employed to match the end of every line and every string. Categorically, it matches straight before the novel line character.</p>
<p>a) ^</p>
<p>b) $</p>
<p>The correct answer is (b)</p>
<p>  
   <strong><emphasis>Exercise 8</emphasis></strong></p>
<p>Choose the module operation that escapes the literals which might occur while carrying out an operation.</p>
<p>a) Escape()</p>
<p>b) Purge()</p>
<p>The correct answer is (a)</p>
<p>  
   <strong><emphasis>Exercise 9</emphasis></strong></p>
<p>Choose the module operation that must be employed for freeing when the operations are employed through the module.</p>
<p>a) Escape()</p>
<p>b) Purge()</p>
<p>The correct answer is (b)</p>
<p>  
   <strong><emphasis>Exercise 10</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt;pattern=re.compile (r”(?P&lt;one&gt;\w+) (?P&lt;two&gt;\w+)?”)</p>
<p>&gt;&gt;&gt;match=pattern.search(“Hi⇢”)</p>
<p>&gt;&gt;&gt;match.span(1)</p>
<p>Answer: (0, 2)</p>
<p>  
   <strong><emphasis>Exercise 11</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt;pattern=re.complie(r”(?P&lt;one&gt;\w+) (?P&lt;two&gt;\w+)?”)</p>
<p>&gt;&gt;&gt;match=pattern.search(“Hi⇢”)</p>
<p>&gt;&gt;&gt;match.start (1)</p>
<p>Answer: 2</p>
<p>  
   <strong><emphasis>Exercise 12</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt;pattern=re.complie(r”(?P&lt;one&gt;\w+) (?P&lt;two&gt;\w+)?”)</p>
<p>&gt;&gt;&gt;match=pattern.search(“Hi⇢”)</p>
<p>&gt;&gt;&gt;match.start (1)</p>
<p>Answer: 0</p>
<p>  
   <strong><emphasis>Exercise 13</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt;pattern=re.compile (“(\w+) (\w+)”)</p>
<p>&gt;&gt;&gt; match=pattern.search (“Hi⇢world”)</p>
<p>&gt;&gt;&gt;match.groups()</p>
<p>Answer: (‘Hi’, ‘world’)</p>
<p>  
   <strong><emphasis>Exercise 14</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt; &gt; &gt; pattern = re.compile( r"\ W")</p>
<p>&gt; &gt; &gt; pattern.split("Ugly is worse than beautiful", 2)</p>
<p>Answer:  ['Ugly, 'is', worse than beautiful]</p>
<p>  
   <strong><emphasis>Exercise 15</emphasis></strong></p>
<p>Which one among the two denotes a compiled regex and is also called Pattern Object?</p>
<p>a)    MatchObject</p>
<p>b)    RegexObject</p>
<p>The correct answer is (b)</p>
<p>  
   <strong><emphasis>Exercise 16</emphasis></strong></p>
<p>Which one among the two denotes the matched pattern?</p>
<p>a)    MatchObject</p>
<p>b)    RegexObject</p>
<p>The correct answer is (a)</p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 3: Literals, Character Classes</strong></p>
<p> </p>
<p><strong>Chapter Objective: </strong>The main objective of this chapter is to make the readers have an in depth understanding of literals, character classes. They are a very important part of regex coding and hence you need to have an in depth knowledge of it. We hope once you go through it, you will have a proper understanding of both these. In the end we have also explained dots, word boundaries and anchors so that the users have a better understanding of these important terms too.</p>
<p>As we are already familiar from chapter 1, literals are the easiest type of pattern matching in regexes. Whenever it discovers a literal, it will just succeed it.</p>
<p>Suppose are applying the regex/vixen/ in order to find the phrase ‘The fast brown vixen climbs over the lazy bitch’, we will discover one match:</p>
<p>The⇢fast⇢brown⇢vixen⇢climbs⇢over⇢the⇢lazy⇢bitch</p>
<p>/vixen/</p>
<p> </p>
<p><strong>Searching by employing a regex</strong></p>
<p>Though, we can also get various results rather than just a single one, if we use regex /am/ to the phrase: I am what I am</p>
<p>I⇢am⇢what⇢I⇢am</p>
<p>/ <strong>am </strong>/</p>
<p>As we already are familiar that metacharacters can exist together with literals in one expression. As a result of this, we can search some expressions which fail to imply what they actually intended. To exemplify, if we are applying the expression/It is interior/, to find ‘it is exterior’ (it is exterior), we will discover that there are no parenthesis in the outcome. It occurs since the parenthesis have a specific sense and are metacharacters.</p>
<p>It⇢is exterior⇢(It⇢is⇢interior)</p>
<p>/it⇢is⇢interior /</p>
<p> </p>
<p><strong>Wrongly unescaped metacharacters</strong></p>
<p>The metacharcters can be employed similar to literals. There are 3 ways to accomplish it:Escaping the metacharacters by preceding them by using a backslash.   Employing the re.escape procedure to escape non-alphanumeric characters which might occur in the expression.The third method is to quote in regexes, the quoting with <strong>\</strong>E and <strong>\</strong>Q. For the languages that back it, it becomes very easy and all you have to do is enclose the portions that need to be quoted with <strong>\</strong>Q (it begins a quote) and <strong>\</strong>E (it finishes the quote).</p>
<p>Unluckily, python does not back it for now.</p>
<p> </p>
<p><strong>Escaped metacharacters in regexes:</strong></p>
<p>In regexes, there exist 12 metacharacters which must be escaped in case they are to be employed with their literal meaning.</p>
<p>·‘.’-Dot</p>
<p>·<strong> ‘\’- </strong>Backlash</p>
<p>·<strong>‘$’- </strong>Dollar sign</p>
<p>·‘?’-Question mark</p>
<p>· ‘(’, ‘)’- opening as well as closing parenthesis</p>
<p>· ‘[’, ‘]’-opening as well as closing square brackets</p>
<p>· ‘{’-opening curly bracket</p>
<p>· ‘^’- Caret</p>
<p>· ‘+’-plus sign</p>
<p>· ‘|’-Pipeline symbol</p>
<p>In a number of cases, the regex engines will do whatever they can to know whether they must have a literal meaning even though they are not escaped, to exemplify, the ‘{’ will be considered as a metacharacter in case it is followed by a number to denote a repetition.</p>
<p> </p>
<p><strong>Character classes:</strong></p>
<p>We will employ a metacharacter, for the maiden time to understand the way the character classes are leveraged.  The character sets or classes enable us to define a character which will map whether any of the well-defined characters on the set is there.</p>
<p>In order to describe a class, we must employ the ‘[’ metacharacter and after than any accepted characters and in the last close it with a ‘]’.  For example, we will define a regex which map the word “analyse” in British as well as American English.</p>
<p>analyze⇢and⇢analyse⇢are⇢valid</p>
<p> </p>
<p>/analy[zs]e/</p>
<p> </p>
<p><strong>Searching by employing a character class</strong></p>
<p>One can also employ the character’s range.  It is accomplished by using a ‘-’ sign in between the two concerned characters; to exemplify, in order to map any lowercase alphabet, we can employ [a-z]. Similarly, to map a digit we might define the character set [0-9].</p>
<p>The ranges of the various character classes might be pooled to map a character against a number of ranges by simply putting a single range after the other without needing any particular separation. To exemplify, if we wish to map any uppercase or lowercase character, we may employ [0-9a-zZ-Z].</p>
<p>The table drawn below will aid you to understand this in a better way:</p>
<p> </p>
<p>Element</p>
<p>Explanation</p>
<p>[</p>
<p>Maps the subsequent character set</p>
<p>0-9</p>
<p>Maps everything in between zero to nine</p>
<p> </p>
<p>Or</p>
<p>a-z</p>
<p>Maps everything between the alphabets a and z</p>
<p> </p>
<p>Or</p>
<p>A-Z</p>
<p>Maps everything  between the alphabets A-B</p>
<p>]</p>
<p>Marks the termination of the character set.</p>
<p> </p>
<p>One also has the option of the denial of ranges. The sense of a character set can be upturned by the placement of ‘^’ sign straight after ‘[’. In case we are having a character set class like [a-z] meaning any alphabet, the negated character class [^a-z] will map anything that is not a lowercase letter. Though, it is vital to understand that there should be a character which is not a lower case letter.</p>
<p> </p>
<p><strong>Predefined character classes:</strong></p>
<p>It would now have been clear to you that employing character classes makes it clear that a few of them are extremely helpful and possibly deserve a shortcut.</p>
<p>The good thing is that there is a variety of predefined character classes which employed again and again and the other programmers are already aware of them which make the expressions even more legible.</p>
<p>Such characters are not only helpful as famous shortcuts for specific character sets.  Also they have different implications in various frameworks. The character class <strong>\</strong>w, that maps any character will map a character set reliant on the configured locale and the back of Unicode.</p>
<p>Below is a table that denotes the various character classes that are backed by python presently.</p>
<p> </p>
<p>Element</p>
<p>Explanation for regular expression with default flags</p>
<p><strong>.</strong></p>
<p>Any character but s newline <strong>\</strong>n is mapped by it</p>
<p><strong>\s</strong></p>
<p>Any whitespace character is mapped by it</p>
<p><strong>\S</strong></p>
<p>Any non-whitespace character is mapped by it</p>
<p><strong>\w</strong></p>
<p>Any alphanumeric character is mapped by it</p>
<p><strong>W</strong></p>
<p>Any non-alphanumeric character is mapped by it</p>
<p> </p>
<p><strong>POSIX character classes in Python</strong></p>
<p>Various character classes denominations are offered by POSIX such as [:space:] for all whitespace characters which comprises of line breaks, etc.  All of these classes follow the same representation which makes them easy to be identified. But they are not backed by python presently.</p>
<p>If you find one, you might implement the similar working by leveraging the functionalities of the character classes. The first element of the above table the dot ‘.’ needs particular attention. It is possibly the eldest and the most widely employed metacharacter. Every character can be mapped by the dot but the newline character. The main cause why it does not map the newline is possible UNIX. The command line tools mostly operate line by line in case of UNIX and the regexes present at that time were applied distinctly to such lines. Hence, there were no novice newline characters to be mapped.</p>
<p>We will employ the dot by making regexes which map 3 characters having any value but the newline.</p>
<p> </p>
<p>Element</p>
<p>Explanation</p>
<p><strong>                                      .</strong></p>
<p>Maps any character</p>
<p><strong>                                      .</strong></p>
<p>Maps any character followed by the preceding one</p>
<p> </p>
<p>The dot metacharacter is a very strong metacharacter which can make problems when not employed properly. In a number of cases, it might be regarded as overkill (or only a sign of laziness while composing regexes).</p>
<p>To better explain what is needed to be mapped and to express more briefly to any hidden reader what a regex is envisioned to do, the usage of character classes is highly recommended. For example, while operating in Windows as well as UNIX file paths, in order to map any character apart from the backslash or slash, you might employ a negated character set:</p>
<p>[^<strong>\/\</strong>]</p>
<p> </p>
<p><strong>Element</strong></p>
<p><strong>Explanation</strong></p>
<p>[</p>
<p>Maps a character set</p>
<p><strong>^</strong></p>
<p>Not mapping this sign’s following characters</p>
<p><strong>\/</strong></p>
<p>Maps a / character</p>
<p><strong>\</strong></p>
<p>Maps a  \ character</p>
<p>]</p>
<p>Finish of the set</p>
<p> </p>
<p>This character is clearly revealing the fact that we wish to map anything except a UNIX or Windows file separator.</p>
<p> </p>
<p><strong>Repeating things: </strong>Being able to map various sets of characters is the maiden thing regexes can achieve which isn’t already achievable with the options accessible on strings. Though, if that is the sole extra capability of regular expressions, they might not be much of an advance. An extra ability is that you are able to specify that parts of the regular expression must be repetitive a fixed number of times.</p>
<p>The maiden metacharacter for repetition, that we will go through is ‘*’. It doesn’t map the literal character, rather it states that the preceding character can be mapped 0 or number times in place of precisely once.</p>
<p>To exemplify, ba*t will map ct (zero a characters), bat (one a), baaat (three a characters), and so on. The regular expression engine has different internal restrictions arising from the size of C’s int type which will stop it from mapping over two billion a characters; you possibly might not have sufficient memory to make a string that big, hence you must reach that limit.</p>
<p>Repetitions like ‘*’ are greedy; while repeating a regular expression, the mapping engine will make an attempt to echo it as many times it can. In case later parts of the pattern don’t map, the mapping engine would then back up and attempt it again with some repetitions.</p>
<p>A side-by-side example will make this more obvious. Let’s consider the expression b[cde]*c. This maps the letter ‘b’, 0 or more letters from the class [cde], and finally finishes with a ‘c’. After this, assume mapping this regular expression against the string bcbde.</p>
<p>Alternation:</p>
<p>In this section we will learn how to match against a set of regexes. This is done by employing the pipe sign ‘|’. Let’s begin by saying that we wish to map the word “yes” or the word “no”. By employing it becomes as easy as:</p>
<p>/yes|no/</p>
<p>The table will give you a furthermore understanding of what we mean:</p>
<p> </p>
<p>Element</p>
<p>Explanation</p>
<p> </p>
<p>Maps either the given sets of characters</p>
<p>yes</p>
<p>Maps the characters y, e and s</p>
<p>|</p>
<p>Or</p>
<p>No</p>
<p>Maps the characters n,o</p>
<p> </p>
<p>On the contrary, if we require to accept greater than 2 values, we may go on adding them in the manner shown below:</p>
<p>/yes| no| maybe/</p>
<p> </p>
<p>Element</p>
<p>Explanation</p>
<p>Yes</p>
<p>The word “yes”</p>
<p>|</p>
<p>Or</p>
<p>No</p>
<p>The word “no”</p>
<p>|</p>
<p>Or</p>
<p>Maybe</p>
<p>The word “maybe”</p>
<p> </p>
<p>When employing huge regexes, we would probably require to wrap alternation inside ‘()’to show that just that portion has been alternated and not the entire expression. To exemplify, when me commit the mistake of not employing ‘()’as in the expression given below:</p>
<p>/License: yes|no/</p>
<p> </p>
<p>Element</p>
<p>Explanation</p>
<p> </p>
<p>Maps either of the given sets of characters</p>
<p>License</p>
<p>The characters L,i,c,e,n,s,e,:,⇢</p>
<p>Yes</p>
<p>y,e and s</p>
<p>|</p>
<p>Or</p>
<p>No</p>
<p>The characters n and o</p>
<p> </p>
<p>We might consider that we accept License: yes or License: no, but in reality we accept either License: yes or no since the alternation has been put to the entire regex rather than merely on the yes|no portion. A right approach for this should be:</p>
<p>Alternation options</p>
<p>/Driving⇢License:⇢(yes|no)/</p>
<p>Demarcated alternation</p>
<p> </p>
<p><strong>Regexes employing alternation</strong></p>
<p><strong>Dot</strong></p>
<p> </p>
<p>The dot maps one character, not being thoughtful what that character implies. The only exception are line break characters .This exception exists mostly due to important reasons. The maiden tools that employed regexes were line-dependent. They might recite a file line by line, and apply the regex distinctly to every line. The result is that by employing these tools, the string might never comprise line breaks, hence the dot might never map them.</p>
<p>Current tools and languages might apply regexes to very huge strings or even whole files. Excluding for JavaScript and VBScript, all regular expression flavors deliberated here offer an option to make the dot map all characters, plus line breaks</p>
<p>In Perl, the style wherein the dot also maps line breaks is known as "single-line mode". It is a bit unlucky, since it is simple to blend this term with "multi-line mode</p>
<p>Other flavors and regular expression libraries have accepted Perl's terms. When employing the regular expression classes of the .NET framework, this approach is triggered by stipulating RegexOptions .Singleline,.</p>
<p>JavaScript as well as VBScript are not consisting of a choice to make the dot map line break characters. In such languages, you might employ a character class like [\s\S] to map any character. This character maps a character which is a whitespace character, or a character which is not a whitespace character. As all characters might be whitespace or non-whitespace, this character maps any character.</p>
<p>Whereas back for the dot is common among regular expression flavors, there are noteworthy dissimilarities in how they handle line break characters. All flavors consider the noviceline \n just like a line break. UNIX info files dismisses lines with one noviceline.</p>
<p> </p>
<p><strong>Anchor:</strong></p>
<p>Anchors are a distinct breed. They do not map any character at all. Rather, they map a location beforehand, afterward, or amid characters. They might be employed to "anchor" the regular engine map at a particular position. The ^ symbol maps the location beforehand the maiden character in the string. Using ^b to bcd maps b. ^b does not map bcd at all, since the c cannot be mapped straight after the beginning of the string, mapped by</p>
<p>In the same way, $ maps straight after the end character in the string. d$ matches d in bcd, whereas b$ will not  map at all.</p>
<p>A regular expression that comprises merely of an anchor might only find 0-length maps. This could be helpful, however can also make problems.</p>
<p> </p>
<p><strong>Word boundary</strong></p>
<p>As we have already learnt that the \b is a metcharacter that is employed for matching a location termed as <strong>word</strong> <strong>boundary</strong>. Such a match is 0-length.</p>
<p>The following are the three different locations in order to be considered as word boundaries</p>
<p>·In case the first character is a word character, the location qualifying as a word boundary is before it</p>
<p>·In case the last character is a word character, the location qualifying as a word boundary is after it.</p>
<p>·The location of the word boundary is in between 2 string characters wherein the first is a word character whereas the second one is not so.</p>
<p>In easy terms: \b enables you to perform a "entire words only" search employing a regex in the case of \bword\b. A "word character" might be defined as a character that can be employed to create words. "Non-word characters" can be considered as the antonym of word character</p>
<p>Precisely which characters will be word characters rests on the regular expression flavor you're operating on. In a number of flavors, characters which are mapped by the short-hand character class \w are the characters which are considered as word characters by word boundaries.</p>
<p>In a number of flavors, excluding the ones conversed below, just have a single metacharacter which maps both beforehand a word and afterward a word. This is so since any location between characters could never be both at the beginning and at the last of a word. Employing only a single operator makes things simpler for you.</p>
<p>As digits are supposed to be word characters, \b4\b can be employed to map a 4 which is not portion of a higher number. This regular expression does not map 44 sheets of a4. Hence, saying "\b maps beforehand and afterward an alphanumeric sequence" is more precise than telling "beforehands and afterwards a word".</p>
<p>\B is the annulled version of \b. \B maps at each location where \b does not. Efficiently, \B maps at any location between 2 word characters and at any location between 2 non-word characters.</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, we hope that you have an in depth understanding of literals, character classes. They are a very important part of regex coding and hence you need to have an in depth knowledge of it. We hope that now you will have a proper understanding of both these.</p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 4: Quantifiers and Boundary Matchers</strong></p>
<p> </p>
<p><strong>Chapter Objective:</strong></p>
<p>The main objective behind this chapter is to make the readers familiar with quantifiers and boundary matchers. This chapter explains in detail the various concepts related to boundary quantifiers including the main types of quantifiers like possessive quantifiers, greedy as well as reluctant quantifiers. The chapter also explains boundary matchers in detail. We hope that once you go through this chapter, you will be able to have a good understanding of them.</p>
<p> </p>
<p><strong>Quantifiers:</strong></p>
<p>Till now, we went through different ways of defining a character in a number of ways. Now will learn about quantifiers- the methods to define the way a character, character set or metacharacter might be recurred.</p>
<p>To exemplify, when we define that a <strong>\</strong>d could be recurring a number of times, we might simply make a form validator for the ‘number of times’ field (don’t forget that <strong> \</strong>d maps any decimal). However, let us begin from the starting, the 3 main quantifiers: ‘?’, ‘+’ and ‘*’.</p>
<p>The table below will give you a furthermore understanding of them:</p>
<p> </p>
<p><strong>Name</strong></p>
<p><strong>Element</strong></p>
<p><strong>Quantification of the preceding character</strong></p>
<p>Asterisk sign</p>
<p>*</p>
<p>0 or more times</p>
<p>Curly brackets</p>
<p>{a,b}</p>
<p>Between a or b times</p>
<p>Plus sign</p>
<p>+</p>
<p>1 or more times</p>
<p>Question mark sign</p>
<p>?</p>
<p>Optional (zero or one times)</p>
<p> </p>
<p>In the table above, we can have a glimpse on the 3 main quantifiers, all of them with a particular use. For example,‘?’ (Question mark) can be employed to map the word bat and its plural form bats:</p>
<p>/bats?/</p>
<p> </p>
<p><strong>Element</strong></p>
<p><strong>Explanation</strong></p>
<p>Bat</p>
<p>Matches the characters b, a, t and s</p>
<p>S?</p>
<p>Maps the character ‘s’ on choice</p>
<p> </p>
<p>In the example given above, the ‘?’ is simply applied to ‘s’ and not to the entire word. The quantifiers are mostly applicable to the preceding token. Another exciting instance of the application of the ‘?’ quantifier would be to map a telephone number which could be in the format 666-666-666,666, 666 666 666 or 666666666.</p>
<p>We are now are aware about the character sets can be leveraged to accept various characters, however it possible that a quantifier is applicable characters, their sets and also can be applicable to groups. We can create a regex such as the one we created above in order to validate the phone numbers.</p>
<p>/<strong> \</strong>d [-<strong>\</strong>s]?<strong> \</strong>d+[- \s]? \d+ /</p>
<p>The table given below gives a better explanation of this regex:</p>
<p> </p>
<p><strong>Type</strong></p>
<p><strong>Element</strong></p>
<p><strong>Explanation</strong></p>
<p>Already defined set of characters</p>
<p><strong>\</strong>d</p>
<p>Any random decimal</p>
<p>Quantifier</p>
<p>+</p>
<p>- which is repeated once or more</p>
<p>Set of characters</p>
<p>[-<strong>\</strong>s]</p>
<p>A ‘-’ or whitespace character</p>
<p>Quantifier</p>
<p>?</p>
<p>- Which can or cannot appear</p>
<p>Already defined set of characters</p>
<p><strong>\</strong>d</p>
<p>Any random decimal</p>
<p>Quantifier</p>
<p>+</p>
<p>- which is repeated once or more</p>
<p>Any defined character set</p>
<p><strong>\</strong>d</p>
<p>Any random decimal</p>
<p>Quantifier</p>
<p>+</p>
<p>- which is repeated once or more</p>
<p> </p>
<p>At the starting, one or more type of quantifiers employing the ‘{}’ brackets had been shown. By employing this syntax, we might define that the preceding character should appear precisely 3 times adding it with {3}, which is expression <strong>\</strong>w {9} shows precisely nine alphanumeric digits.</p>
<p>We might also define a particular range of repetitions by offering a minimum and maximum times of repetitions which is between 3 and 9 times could be defined with the syntax {3,9}. Either the highest and lowest value could be omitted defaulting to zero and infinite respectively. To do a repetition of up to 4 times, we might employ {,4}, we could also do a repetition  for a minimum of four times with {4,}.</p>
<p>Rather than employing {,1}, you might employ ‘?’. The same goes for {0,} for the ‘*’ and {1,} for ‘+’.</p>
<p>Other programmers will want you to accomplish so. When you don’t follow this practice, everyone going through your expressions would lose some attempting to find out what types of fancy material you tried to achieve.</p>
<p>These 4 various combinations are shown in the table given below:</p>
<p> </p>
<p><strong>Syntax</strong></p>
<p>              </p>
<p><strong>Explanation</strong></p>
<p>{a}</p>
<p>The preceding character is repeated precisely ‘a’ times</p>
<p>{a,}</p>
<p>The preceding character is repeated at least  ‘a’ times</p>
<p>{,a}</p>
<p>The preceding character is repeated ‘a’ times at the maximum</p>
<p>{a,b}</p>
<p>The preceding character is repeated between a and b times (both inclusive)</p>
<p> </p>
<p>Earlier, we made a regex to validate phone numbers which can be in the format 666-666-666, 666 666 666, or 666666666. We defined a regex to validate it by employing the metacharacter ‘+’: /<strong>\d+ [-\s]? \d+[-\s]?\d</strong> /. It will need the digits (<strong>\d</strong>) to be reiterated 1 or more times.</p>
<p>We will now further learn in the regex by defining that the extreme left cluster of digits can comprise up to 4 characters whereas the remaining digit clusters must contain 4 digits.</p>
<p>Exactly 4 repetitions</p>
<p>/<strong>\d{1,4}[-\s]? \d {4} [-\s]</strong></p>
<p>Between one and four repetitions</p>
<p><strong><emphasis>Using Quantifiers</emphasis></strong></p>
<p> </p>
<p><strong>Greedy as well as reluctant quantifiers</strong></p>
<p>Still we have not defined what will be mapping when we apply a quantifier like /”.+”/ to a text like: English “sweet”, Spanish “ dulce”. We might expect it maps “sweet” and “dulce”, but it would actually map “sweet”, Spanish “dulce”.</p>
<p>This is known as greedy and is either of the two probable behaviors of the quantifiers in Python language. The first one is termed greedy behavior. It will attempt to map as much as probable to accomplish the biggest possible map. The non-greedy behavior is denoted by the addition of an extra ‘? ’ to the quantifier. To exemplify, *?, ??. A quantifier denoted as reluctant will act just like the antonym of the greedy type. They will attempt to have largest map possible.</p>
<p> </p>
<p><strong>Possessive Quantifiers</strong>:</p>
<p>This is another behavior of the quantifiers named as the possessive quantifiers. It is backed by the Java and .NET flavors of the regexes at present.</p>
<p>They are denoted by an additional ‘+’ sign to the quantifier; to exemplify, *+, ?+. Possessive quantifiers shall not be covered furthermore in this book. We might have a better understanding how this quantifier operates by going through the same regex (with the exclusion of leaving the quantifier) to the same type of text that has two highly distinguishing outcomes.</p>
<p>/ “.+?”/                </p>
<p>English⇢ “sweet”,⇢Spanish⇢ “dulce”</p>
<p>/ “.+?”/</p>
<p> </p>
<p><strong>Greedy as well as reluctant quantifiers</strong></p>
<p> </p>
<p><strong>Boundary Matchers:</strong></p>
<p>Up to here we have only attempted to figure out regexes within a text.  Sometimes it is needed to map an entire line, we might also require to map at the starting of a line or even at last. This could be accomplished because of the boundary matchers. They are a variety of identifiers which will correspond to a specific position in the interior of the input. The table given below gives an overview of the boundary matchers present in python:</p>
<p> </p>
<p><strong>Matcher</strong></p>
<p><strong>Explanation</strong></p>
<p>$</p>
<p>Maps at the starting of a line</p>
<p><strong>\</strong>b</p>
<p>Maps at word boundary</p>
<p><strong>\</strong>B</p>
<p>Maps the antonym of <strong>\</strong>b. Everything is not a word boundary.</p>
<p><strong>\</strong>A</p>
<p>Maps the starting  of the input</p>
<p><strong>\</strong>Z</p>
<p>Maps the last of the input</p>
<p>^</p>
<p>Maps the starting of the line</p>
<p> </p>
<p>They will act distinctly in distinct contexts. To exemplify, the word boundaries (<strong>\</strong>b) will rely straightly on the configured locale since various languages can have various word boundaries and the starting and end of the line boundaries shall behave distinctly depending on particular flags which we will go through in the coming chapter.</p>
<p>Let us have a furthermore understanding of the boundary matchers by composing a regex which will map lines which begin with “Name”. When you have a look at the preceding table, you will be figuring out the presence of a metacharacter ^ which expresses the starting of a line. By employing it, we may compose the following expression.</p>
<p>/^Name:/</p>
<p> </p>
<p><strong>Element</strong></p>
<p><strong>Description</strong></p>
<p>^</p>
<p>Maps the starting of the line</p>
<p>N</p>
<p>Maps the followed by N</p>
<p>A</p>
<p>Maps the followed by a</p>
<p>M</p>
<p>Maps the followed by m</p>
<p>E</p>
<p>Maps the followed by e</p>
<p>:</p>
<p>Maps the followed by :</p>
<p> </p>
<p>When we wish to take one step forward and keep on employing the ‘^’ and the ‘$’ symbol in combination to map the end of the line, we must also keep in mind that from this moment we will map against the entire line and not merely attempting to find a pattern in the line.</p>
<p>Learning from the preceding example, let us consider we wish to assure that after the name there exist just alphabetic characters till the finish of the line. This will be done by us by mapping the whole line upto the last by setting a character set with the permitted characters and enabling their recurrence any number of times till the finish of the line.</p>
<p>/^Name: [\sa-zA-Z]+$/</p>
<p> </p>
<p>Element</p>
<p>Explanation</p>
<p>^</p>
<p>Maps the starting of the line</p>
<p>N</p>
<p>Maps the followed by character N</p>
<p>a</p>
<p>Maps the followed by character a</p>
<p>M</p>
<p>Maps the followed by m</p>
<p>E</p>
<p>Maps the followed by e</p>
<p>:</p>
<p>Maps the followed by ‘:’</p>
<p>[\sa-zA-Z]</p>
<p>Now maps the followed by uppercase or lowercase character,</p>
<p>+</p>
<p>The character is 1 or more number of times</p>
<p>$</p>
<p>Till the finish of the line</p>
<p> </p>
<p>Another remarkable boundary matcher is the word boundary \b. It is used for mapping any character which is not a word character and hence and possible boundary. This is extremely helpful when we wish to work with isolated words and we do not bother to create sets of characters with each single character that might distinguish our words. We might for example, assure that the word ‘sweet’ is present in a text by employing the following regexes.</p>
<p>/\bsweet\b/</p>
<p> </p>
<p>Element</p>
<p>Explanation</p>
<p>\b</p>
<p>Maps the word boundary</p>
<p>S</p>
<p>Maps the followed by character s</p>
<p>W</p>
<p>Maps the followed by character w</p>
<p>E</p>
<p>Maps the followed by e</p>
<p>E</p>
<p>Maps the followed by e</p>
<p>T</p>
<p>Maps the followed by t</p>
<p>\b</p>
<p>Now maps another followed by word boundary</p>
<p> </p>
<p>Why is the preceding expression better than /sweet/? The answer for this question is that the expression will map an isolated word rather than a word containing “sweet” which implies that /sweet/would simply map sweet, sweeted or otsweet; whereas /\bsweet\b/ will simply map sweet.</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, you must be familiar with quantifiers and boundary matchers. You must have been able to learn in detail the various concepts related to boundary quantifiers including the main types of quantifiers like possessive quantifiers, greedy as well as reluctant quantifiers.  You must have also had good understanding of boundary matchers in detail. We hope that now you will be able to have a good understanding of them.</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>Choose the one that is the methods to define the way a character, character set or metacharacter might be recurred.</p>
<p>a) Quantifier</p>
<p>b) Boundary Matcher</p>
<p>Answer: (a)</p>
<p>  
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>What does {a,} imply?</p>
<p>a) The preceding character is repeated at least   ‘a’ times</p>
<p>b) The preceding character is repeated precisely ‘a’ times</p>
<p>c) The preceding character is repeated between a and b times (both inclusive)</p>
<p>d) The preceding character is repeated ‘a’ times at the maximum</p>
<p>Answer: (a)</p>
<p>  
   <strong><emphasis>Exercise 3</emphasis></strong></p>
<p>What does {,a} imply?</p>
<p>a) The preceding character is repeated at least   ‘a’ times</p>
<p>b) The preceding character is repeated precisely ‘a’ times</p>
<p>c) The preceding character is repeated between a and b times (both inclusive)</p>
<p>d) The preceding character is repeated ‘a’ times at the maximum</p>
<p>Answer: (c)</p>
<p>  
   <strong><emphasis>Exercise 4</emphasis></strong></p>
<p> What does {a,b} imply?</p>
<p>a) The preceding character is repeated at least   ‘a’ times</p>
<p>b) The preceding character is repeated precisely ‘a’ times</p>
<p>c) The preceding character is repeated between a and b times (both inclusive)</p>
<p>d) The preceding character is repeated ‘a’ times at the maximum</p>
<p>Answer: (c)</p>
<p>  
   <strong><emphasis>Exercise 5</emphasis></strong></p>
<p> What does What does {,a} imply?</p>
<p>a) The preceding character is repeated at least   ‘a’ times</p>
<p>b) The preceding character is repeated precisely ‘a’ times</p>
<p>c) The preceding character is repeated between a and b times (both inclusive)</p>
<p>d) The preceding character is repeated ‘a’ times at the maximum</p>
<p>Answer: (b)</p>
<p>  
   <strong><emphasis>Exercise 6</emphasis></strong></p>
<p> What is used in case it is needed to map an entire line, we might also require to map at the starting of a line or even at last?</p>
<p>Answer: Boundary matchers</p>
<p> </p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 5: Special characters, module contents and Regular Expression Objects</strong></p>
<p> </p>
<p><strong>Chapter Objective:</strong></p>
<p> </p>
<p>The main objective of this chapter is to make the readers well aware of special characters, module contents and regular expression objects. The chapter gives an overview of almost all of them and tries to give the readers an idea of all of them as they are important part of using regular expressions in python. The chapter also explains various module contents and regex objects in detail. We hope that after going through this chapter, you will have a good understanding of all these important concepts.</p>
<p> </p>
<p>The special characters are:</p>
<p> </p>
<p><strong>(Dot .)</strong></p>
<p> In the standard mode, this maps any character but a newline. In the event of the DOTALL flag been stated, this maps any character plus a novice line.</p>
<p><strong> (dollar $: </strong> Maps the end of the string or just before the novice line at the last of the string, as well as in MULTILINE mode also maps afore a novice line  too maps both ‘too’ and ‘toobar’, whereas the regex too$ maps only ‘too’. More importantly, searching for too.$ in 'too1\ntoo2\n' maps ‘too2’ normally, but ‘too1’ in MULTILINE mode; finding for a single $ in 'too\n' would find 2(empty) matches: first just afore the novice line, and one at the last of the string.</p>
<p><strong>(Asterisk)</strong>: Makes the resulting regex to map zero or more repetitions of the earlier regex, as many repetitions as are conceivable. bc* will map ‘b’, ‘bc’, or ‘b’ followed by any number of ‘c’s.</p>
<p><strong>'+':</strong> Makes the resulting regex to map one or more repetitions of the earlier regex. bc+ will map ‘b’ followed by any non-zero count  of ‘c’s; it will not map just ‘b’.</p>
<p><strong>'?</strong>': Makes the resulting regex to map zero or one repetitions of the following regex. bc? Will map either ‘b’ or ‘bc’.</p>
<p>*?, +?, ??</p>
<p>The '*', '+', and '?' qualifiers are all greedy; they map as much text as probable. Sometimes this behavior isn’t wanted; when the regex &lt;.*&gt; is mapped against '&lt;H1&gt;title&lt;/H1&gt;', it will map the whole string, and not simply '&lt;H1&gt;'. Totaling '?' after the qualifier makes it do the map in non-greedy or minimal fashion; as less characters as it can be mapped. Employing.*? In the last expression will map only '&lt;H1&gt;'.</p>
<p><strong>{m}:</strong> States that precisely m copies of the preceding regex  must be mapped ; lesser maps cause the whole regex not to map. To exemplify, a{7} will map precisely seven 'a' characters, but not six.</p>
<p><strong>{m,n}:</strong> Makes the resulting regex  to map from m to n repetitions of the previous regexes , trying to map as many repetitions as is l. For example, a{3,5} will match from 3 to 5 'a' characters. Omitting m specifies a lower bound of zero, and omitting n specifies an infinite upper bound. As an example, a{4,}b will match aaaab or a thousand 'a' characters followed by a b, but not aaab. The comma may not be omitted or the modifier would be confused with the previously described form.</p>
<p><strong>{m,n}?:</strong> Makes the resulting regex to map from m to n repetitions of the previous regexes, trying to map as less repetitions as it make . It is the non-greedy type of the preceding qualifier. Toe exemplify, on the six -character string 'bbbbbb', b{3,5} will map five 'a' characters, whereas b{3,5}? will only map three characters.</p>
<p><strong>'\'</strong>: Either results in the escape of the special characters (allowing you to map characters such as '*', '?', and so on), or hints a particular sequence.</p>
<p>In case you’re not employing a raw string to show the pattern, don’t forget that Python also employs the backslash as an escape series in string literals; when the escape series isn’t acknowledged by Python’s parser, the ‘\’and following character are encompassed in the resultant string. But, in case Python will identify the resultant sequence, the ‘\’ must be repeated two times. It is complex and difficult to understand, therefore it’s extremely suggested that you employ raw strings for all but the easiest expressions.</p>
<p><strong>[]:</strong> It is employed to show a set of characters. You may list characters on an individual basis such as, [ank] will map 'a', ‘n’, or 'k'. It is possible to denote the ranges of characters by offering two characters and partitioning them via a '-', to exemplify [b-z] will map any lowercase ASCII letter from b to z, [0-6][0-9] will map all the two-digits numbers from 00 to 69, and [0-9A-Fa-f] will map all the hexadecimal digits. When there is escaping of - (e.g. [a\-z]) or when it’s positioned as the maiden or the ending character (e.g. [b-]), it will map a literal '-'. When inside sets, special characters do not have their specific meaning. To exemplify, [(+*)] will map any of the literal characters '(', '+', '*', or ')'.</p>
<p>Character classes like \w or \S are also received inside a set, even though the characters they are mapping relies on if LOCALE or UNICODE mode is in effect. Complementing the set maps the characters, which are not contained in between the range.  If the first character of the set is '^', all the characters that are not in the set will be matched. To exemplify, [^6] will map any character but '6', and [^^] will map any character but '^'. ^ has no particular meaning in case it’s not the maiden character in the set.</p>
<p>To map a literal ']' in a set, a ‘’it with a ‘\’, or place it at the starting of the set. To exemplify, [()[\]{}] and []()[{}] will map a parenthesis.</p>
<p><strong>'|':</strong> N|M, where N and M can be random regexes, makes a regex which will map either N or M.  A random number of regexes can be partitioned by the '|' in this manner. This can be employed in the interior of the groups also. Since the target string is scanned, regexes partitioned by '|' are attempted from left to right. In case a pattern totally maps, that branch is accepted. This implies that once N matches, M will not be verified furthermore, even though it shall result in a lengthier overall map. To be exact, the '|' operator is not a greedy operator. To map a literal '|', employ \|, or enfold it in the interior of a character class, such as [|].</p>
<p>(...): Maps whatever regex is in the interior ‘()’, and shows the beginning and end of a group; the insides of a group can be recovered after a map has been carried out, and can be mapped afterwards in the string with the \number special series, shown below. To map the literals '(' or ')', employ \( or \), or encircle them in the interior of a character class: [(] [)].</p>
<p><strong>(?...):</strong>It denotes extension representation. The maiden character after the '?' controls what the sense and future syntax of the construct is. Most of the times extensions do not make a novice group. Below are the presently supported extensions.</p>
<p><strong>(?iLmsux)</strong></p>
<p>The group maps the empty string; the alphabets set the following flags:</p>
<p>re.U (Unicodereiant), re.I (ignore case), re.S (dot maps all), re.M (multi-line),</p>
<p>, re.L (locale reliant), re.X (verbose), for the whole regex.</p>
<p><strong>(?:...)</strong></p>
<p>It is a non-capturing type of normal parentheses. Maps whichever regex is in the interior of the parentheses, however the substring mapped by the group cannot be recovered after executing a match.</p>
<p><strong>(?P&lt;name&gt;...):</strong>They are  just like  to regular parentheses, though the substring mapped by the group is accessible through the representative group name. Group names should be legal Python identifiers, and every group name should be defined only one time within a regex. A representative group is also a numbered group, simply in case the group was not named.</p>
<p>Named groups can be referenced in three contexts. If the pattern is (?P&lt;quote&gt;['"]).*?(?P=quote) (i.e. matching a string quoted with either single or double quotes).</p>
<p> </p>
<p><strong>Module Contents</strong></p>
<p>The module defines a number of things such as functions. A few of the functions are easier are versions of the complete featured methods for compiled regexes. Maximum of the non-trivial applications mostly employ the compiled type.</p>
<p>re.compile(pattern, flags=0)</p>
<p>Compile a regex pattern into a regex object, that can be employed for mapping by employing its match() and search()types , explained below.</p>
<p>The expression’s actions can be changed by giving the values of flags. Values could be the variables given below, combined by employing ‘|’ operator).</p>
<p>The sequence</p>
<p>code= re.compile(pattern)</p>
<p>outcome= prog.match(string)</p>
<p>is same as</p>
<p>outcome= re.match(pattern, string)</p>
<p>but employing re.compile() and saving the resultant regex object for using again more well-organized when the expression would be employed various times in one program.</p>
<p>It is to be noted that  the compiled types  of the most newest patterns forwarded to, re.search()are cached, hence codes that employ just a few regexes at a time don’t require to be concerned about compiling regexes.</p>
<p>re.A</p>
<p>re.ASCII</p>
<p>Make the special sequences do ASCII-only mapping rather than complete Unicode mapping. It only makes sense for Unicode patterns, and is not given much consideration for byte patterns.</p>
<p>It must be noted that in order to have  backward compatibility, the re.U flag still are there and re.UNICODE and its implanted counterpart (?u)), though these are recurring in the third version of Python 3 as maps are Unicode by standard for strings (and Unicode mapping isn’t permitted for bytes).</p>
<p>re.DEBUG</p>
<p>Shows debug info about the expression that is assembled.</p>
<p>re.I</p>
<p>re.IGNORECASE</p>
<p>Does case-insensitive mapping; expressions such as [A-Z] will map lowercase letters, also. It is not altered by the present locale and runs for Unicode characters as anticipated.</p>
<p>re.L</p>
<p>re.LOCALE</p>
<p>Make the special sequences such as \b, \s reliant on the present locale. The usage of this flag is not appreciated as the locale process is very untrustworthy, and it only takes care of a single “culture” at any time in any case; you must employ Unicode mapping rather, this is the default in the third version of  Python  for Unicode (str) types.</p>
<p>re.M</p>
<p>re.MULTILINE</p>
<p>'^' maps at the starting of the string and at the starting of every line (following every novice line instantly) and '$' maps at the last of the string and at the last of every line (preceding every novice line instantly). By standard, '^' maps only at the starting of the string, and '$' just at last of the string and instantly before the noviceline (if any) at last of the string.</p>
<p>re.S</p>
<p>re.DOTALL</p>
<p>Enables the '.' map any character at all, which contains with a noviceline; without this flag. This special character will map everything but a noviceline.</p>
<p>re.X</p>
<p>re.VERBOSE</p>
<p>This flag enables you to compose regexes that appear better. Whitespace in the pattern is unobserved, but when in a character class and in case a line does not have a '#' in a character class or all characters from the extreme left like '#' through the finish of the line are unnoticed.</p>
<p>That implies that the 2 below regexes objects that map a decimal number are have same workingl:</p>
<p>c = re.compile(r"""\d +  # the integral part</p>
<p>\.              # the decimal point</p>
<p>\d *  # some fractional digits""", re.X)</p>
<p>be= re.compile(r"\d+\.\d*")</p>
<p>re.search(pattern, string, flags=0)</p>
<p>Inspect via string finding for a position where the regex pattern produces a map, and revert back respective match object. Reverts back None in case there is not any position in the string maps the pattern; it must be taken into consideration that it is distinct from finding a 0-length map at any instant in the string.</p>
<p>re.match(pattern, string, flags=0)</p>
<p>In case 0 or more characters at the starting of string map the regex pattern, revert back a respective match object. Revert back none in case the string does not map the pattern; it is to be considered that this is distinct from a 0-length match.</p>
<p>Again, it is to be considered that even in MULTILINE mode, re.match() will simply map at the starting of the string and not at the starting of every line.</p>
<p>In case you wish to find a map anywhere in string, employ search()</p>
<p>re.split(pattern, string, maxsplit=0, flags=0)</p>
<p>Partitions string by the occurrence of pattern. In case capturing parentheses are employed in pattern, the text of every group in the pattern is also reverted back as part of the consequential list. In case maxsplit is not zero, at the maximum maxsplit splitstakes place, and the remaining part of the string is reverted back as the final part of the list.</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; re.split('\W+', 'Bords, bords, bords.')</p>
<p>['Bords', 'bords', 'bords', '']</p>
<p>&gt;&gt;&gt; re.split('(\W+)', 'Bords, bords, bords.')</p>
<p>['Bords', ', ', 'bords', ', ', 'bords', '.', '']</p>
<p>&gt;&gt;&gt; re.split('\W+', 'Bords, bords, bords.', 1)</p>
<p>['Bords', 'bords, bords.']</p>
<p>&gt;&gt;&gt; re.split('[a-f]+', '0a4B9', flags=re.IGNORECASE)</p>
<p>['0', '4', '9']</p>
<p>In case there is an occurrence of capturing groups in the separator and it maps at the beginning of the string, the outcome will begin with an empty string. This is similar for the end of the string:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; re.split('(\W+)', '...bords, bords...')</p>
<p>['', '...', 'bords', ', ', 'bords', '...', '']</p>
<p>This way, separator elements are always established at the similar relative indices within the result list.</p>
<p>It is to be considered that split would never split a string on an empty pattern match. To exemplify:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; re.split('x*', 'boo')</p>
<p>['boo']</p>
<p>&gt;&gt;&gt; re.split("(?m)^$", "boo\n\nbar\n")</p>
<p>['boo\n\nbar\n']</p>
<p>re.findall(pattern, string, flags=0)</p>
<p> </p>
<p>Reverts back all non-overlapping maps of pattern in string like a strings list. The string has been scanned left-to-right, and maps are reverted back in the order discovered. In case 1 or more groups are there in the pattern, revert back a list of groups; this would be a list of tuples in case the pattern comprises of more than a single group. Empty matches are comprised in the outcome until they touch the starting of another match.</p>
<p>re.finditer(pattern, string, flags=0)</p>
<p>Reverts back an iterator giving map objects over all non-overlapping maps for the regex pattern in string. The string has been scanned left-to-right, and maps are reverted in the order discovered. Empty maps are comprised in the outcome until they touch the starting of another map.</p>
<p>re.sub(pattern, repl, string, count=0, flags=0)</p>
<p>Revert back the string gotten by changing the leftmost non-overlapping happenings of pattern in string by the replacement repl. In case the pattern isn’t there, string is reverted back unaltered. repl could be either a string or a function; in the event of it being a string, any backslash escapes in it are refined. It means, \n is transformed to a single noviceline character, \r is transformed to a carriage return, and etc. Unknown escapes like \j are left aloof. Backreferences, like \7, are changed with the substring mapped by group 7 in the pattern. To exemplify:</p>
<p>In case, repl is a function, it is known as for each non-overlapping happening of pattern. The function takes a one match object argument, and reverts back the changed string. To exemplify:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; def dashrepl(matchobj):</p>
<p>...               if matchobj.group(0) == '-': return ' '</p>
<p>...               else: return '-'</p>
<p>&gt;&gt;&gt; re.sub('-{1,2}', dashrepl, 'pro----gram-files')</p>
<p>'pro--gram files'</p>
<p>&gt;&gt;&gt; re.sub(r'\sAND\s', ' &amp; ', 'Maked means as well as Spam', flags=re.IGNORECASE)</p>
<p>'Maked means as well as Spam'</p>
<p>The pattern might be a string or an regex object.</p>
<p>The optional argument number is the highest count of pattern occurrences to be changed; count should be a non - integer. If nil or 0, all occurrences would be changed. Empty maps for the pattern are changed merely in case not neighboring to a preceding map, therefore sub('x*', '-', 'cde') reverts back '-c-d-e-'.</p>
<p>In addition to the character escapes and backreferences as explained in the preceding sections, \g&lt;name&gt; will employ the substring mapped by the group titled name, as defined by the (?P&lt;name&gt;...) syntax. \g&lt;number&gt; employs the respective group number; \g&lt;2&gt; and hence same as \2, but isn’t vague in a replacement like \g&lt;3&gt;0. \30 would be understood as a reference to group 30, not a reference to group 3 trailed by the literal character zero. The backreference \g&lt;0&gt; substitutes in the whole substring mapped by the regex.</p>
<p>re.subn(pattern, repl, string, count=0, flags=0)</p>
<p>Do the similar operation like nsub(), but revert back a tuple (new_string, number_of_subs_made).</p>
<p>re.escape(string)</p>
<p>Revert back string with all non-alphanumerics backslashed; this is helpful in case you wish to map an random literal string which might  have regex metacharacters in it.</p>
<p>re.purge()</p>
<p>Eliminate the regex cache.</p>
<p>exception re.error</p>
<p>Exception occurs in case a string passed to 1 of the functions here is not a suitable regex (to exemplify, it could comprise unmapped parentheses) or when some other error happens while compilation or mapping. There is no error in any case a string comprises no map for a pattern.</p>
<p> </p>
<p><strong>Regular Expression Objects</strong></p>
<p>Compiled regex objects back the below methods and attributes:</p>
<p>regex.search(string[, pos[, endpos]])</p>
<p>Scan via string looking for a position in which this regex creates a map, and reverts back a respective match object. Revert back ‘None’ in case no location in the string maps the pattern; it is to be considered that this is distinct from discovering a 0-length map at a particular point in the string.</p>
<p>The elective second parameter pos offers an index in the string in which the search is to begin; it defaults to zero. It is not totally equal to slicing the string; '^' matches at the real beginning of the string and at positions just after a newline, but not necessarily at the index where the search is to start.</p>
<p>The elective parameter endpos restricts how large the string would be searched; it would be like the string is endpos characters in length, hence just the characters from pos to endpos - 1 would be found for a map. In case endpos is lower than than pos,  there will not be any match found ;in other case , in case  rx is a compiled regexp object, rx.search(string, 0, 60) is same as rx.search(string[:60], 0).</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; pattern = re.compile("d")</p>
<p>&gt;&gt;&gt; pattern.search("cow")              </p>
<p>&lt;_sre.SRE_Match object at ...&gt;</p>
<p>&gt;&gt;&gt; pattern.search("cow", 1)</p>
<p>regex.match(string[, pos[, endpos]])</p>
<p>If 0 or more characters at the starting of string match this regex, revert back a respective match object. Revert back ‘None’ in case the string does not map the pattern; it is to be considered that this is distinct from a 0-length match.</p>
<p>The elective pos and endpos parameters have the similar sense as for the search() process.</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; pattern = re.compile("o")</p>
<p>&gt;&gt;&gt; pattern.match("cow")              </p>
<p>&gt;&gt;&gt; pattern.match("cow", 1)  </p>
<p>&lt;_sre.SRE_Match object at ...&gt;</p>
<p>If you wish to find a map anywhere in string, employ search() as an alternative.</p>
<p>regex.split(string, maxsplit=0)</p>
<p>Similar to the split() function, employing the compiled pattern.</p>
<p>regex.findall(string[, pos[, endpos]])</p>
<p>Just like the findall() function, employing the compiled pattern, it also accepts elective pos and endpos parameters that limit the search region like for match().</p>
<p>regex.finditer(string[, pos[, endpos]])</p>
<p>Similar to the finditer() function, employing the compiled pattern, but also accepts optional pos and endpos parameters that restrict the search region such as for match().</p>
<p>regex.sub(repl, string, count=0)</p>
<p>Similar to the sub() function, by employing the compiled pattern.</p>
<p>regex.subn(repl, string, count=0)</p>
<p>Similar to the subn() function, by employing  the compiled pattern.</p>
<p>regex.groups: The count of capturing clusters in the pattern.</p>
<p>regex.groupindex</p>
<p>A dictionary matching any figurative group names characterized by (?P&lt;id&gt;) to group counts. The dictionary is null in case no symbolic groups were employed in the pattern.</p>
<p>regex.pattern</p>
<p>The pattern string wherein the regular expression object was compiled.</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, you must be well aware of special characters, module contents and regular expression objects. You must have had an overview of almost all of them and have an idea of all of them as they are important part of using regular expressions in python. You also might be having various module contents and regex objects in detail. We believe that now you will have a good understanding of all these important concepts.</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>Which special character maps any character but a newline?</p>
<p>Answer: Dot</p>
<p>  
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>Which special character maps the beginning of the string, and in MULTILINE mode also maps directly after every newline?</p>
<p>Answer: Caret</p>
<p>  
   <strong><emphasis>Exercise 3</emphasis></strong></p>
<p>Which special character maps the end of the string or just before the novice line at the last of the string?</p>
<p>Answer: Dollar</p>
<p>  
   <strong><emphasis>Exercise 4</emphasis></strong></p>
<p>Which special character makes the resulting regex to map zero or more repetitions of the earlier regex, as many repetitions as are conceivable?</p>
<p>Answer: Asterisk</p>
<p>  
   <strong><emphasis>Exercise 5</emphasis></strong></p>
<p>Which special character makes the resulting regex to map zero or one repetitions of the following regex?</p>
<p>Answer: Question mark</p>
<p>  
   <strong><emphasis>Exercise 6</emphasis></strong></p>
<p>Which between the two states that precisely m copies of the preceding regex must be mapped?</p>
<p>a) {m},</p>
<p>b) {m,n}</p>
<p>Answer: (a)</p>
<p>  
   <strong><emphasis>Exercise 7</emphasis></strong></p>
<p>Which among the following make the special sequences do ASCII-only mapping rather than complete Unicode mapping?</p>
<p>a) re.ASCII</p>
<p>b) re.DEBUG</p>
<p>Answer: re.ASCII</p>
<p> </p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 6: Grouping</strong></p>
<p> </p>
<p><strong>Chapter Objective:</strong></p>
<p>The main objective is to make the readers have a further more understanding of using regular expressions with python<strong>. </strong>The main point covered in this topic is grouping.  First of all the chapter explains expressions with grouping so that the reader becomes well familiar with their use. After this the chapter explains back references and how they can be used more efficiently. Next the chapter deals with different types of groups like named groups and atomic groups and explains how they can be employed to make the use of regular expressions in an easier manner. The last section deals with specialized cases with groups which include yes/no pattern and overlapping patterns.</p>
<p>Grouping is an emphatic technique that enables you to carry out operations like:</p>
<p>Formulating sub expressions that can be practiced for quantifiers. To exemplify, the reusing a subexpression instead of employing a single character.</p>
<p>Rather than changing the entire expression, we may describe precisely what needs to be changed.</p>
<p>Gathering data from the matched pattern.</p>
<p>Employing the extracted data again in regular expression, which is possibly the most helpful property. An example would be the detection of recurrent words.</p>
<p> </p>
<p><strong>Expressions with Python:</strong></p>
<p>Grouping is achieved via two metacharacters and (). The easiest instance of employing parenthesis would be the creation of a subexpression. To exemplify, consider you have a having a product list, the identity for every product comprises of 2 or 3 series of digits that are followed by a ‘-’ and an alphanumeric character, 1-a3-b:</p>
<p>&gt;&gt;&gt;re.match(r “( (\d-(\w{2,3}”,ur”1-a3-b”)</p>
<p>&lt;_sre.SRE_Match at 0x10f690798&gt;</p>
<p>As can be noticed from the previous example, the ‘()’ show that the regular expression engine which the parenthesis include inside them must be considered as a single unit.</p>
<p>Let us consider one more example. Here we have to match in case there is 1 or more bc followed by d:</p>
<p>&gt;&gt;&gt;re.search(r “(bc)+d”, ur “abbcd”)</p>
<p>&lt;_sre.SRE_Match at 0x10f69a09</p>
<p>&gt;&gt;&gt;re.search (r “(bc)+d”, ur “abbc”)</p>
<p>There is another characteristic of grouping which is termed as capturing. You may employ groups in various operations since they capture matched pattern.</p>
<p>To exemplify, consider that there is a product list. The identities of the product list (ID) comprise of numbers which denote the state to which the product belongs, a ‘-’ as a separator and 1more alphanumeric as the identity in the database. A request is made for the extraction of the state codes.</p>
<p>&gt;&gt;&gt;pattern= re.compile (r “((\d+)-\w+”)</p>
<p>&gt;&gt;&gt;it= pattern.finditer(r “1-a\n30-baer\n44-afcr”)</p>
<p>&gt;&gt;&gt;match=it.next ()</p>
<p>&gt;&gt;&gt;match.group (1)</p>
<p>‘1’</p>
<p>&gt;&gt;&gt;match=it.next ()</p>
<p>&gt;&gt;&gt;match.group (1)</p>
<p>‘30’</p>
<p>&gt;&gt;&gt;match=it.next ()</p>
<p>&gt;&gt;&gt;match.group (1)</p>
<p>‘44’</p>
<p>In the previous example, we have formulated a pattern in order to match the identities, though we only capture groups comprising of the state digits. Don’t forget while working with the group method, the entire match is returned by the index zero as well as the group begins at index one. Capturing offers a large variety of responsibilities owing to which they can be employed with a variety of operations which would be studied in the coming sections.</p>
<p> </p>
<p><strong>Back references:</strong></p>
<p>You already might be having an idea of what back references are. We will have a furthermore understanding of them in this section. As has been described, one of the most emphatic functionalities of grouping is that grouping enables us to use the group that has been captured inside the regular expression or other operations. This is actually what the back references offer. Possibly the most important example for bringing some clarity is the regular expression to search duplicated words  as described in the example given below:</p>
<p>&gt;&gt;&gt;pattern=re.compile (r “(\w+) <strong>\1</strong>”)</p>
<p>&gt;&gt;&gt;match=pattern.search(r“hi hi world”)</p>
<p>&gt;&gt;&gt;match.groups ()</p>
<p>(‘hi’,)</p>
<p>In this case, a group compiled of 1 or more than 1 alphanumeric character is matched. After this a whitespace is attempted to be matched by the pattern and ultimately we are having the \1 back reference. It has been underlined and highlighted above which implies that it must match precisely the similar thing it matched as the 1st group.</p>
<p>They can be employed with the first ninety nine groups. Of course, with a rise in the group number, you may discover the job of reading and maintaining the regular expression in a more complicated manner. It can be decreased by employing named groups. We will have an understanding of them in the coming sections and before that we need to learn a few things more about back references. Hence let us consider a furthermore operations in back references wherein the back references are employed. Rememorize the example described in the previous section wherein there was a product list. Let us attempt to alter the order of the identity, so we are having the identity in the database, a -, and a country code.</p>
<p>&gt;&gt;&gt;pattern=re.compile (r “(\w+)”)</p>
<p>&gt;&gt;&gt;it= pattern.finditer(r “\2-\1”, “1-a\n30-baer\n44-afcr”)</p>
<p>(‘a-1\nbaer-30\nafcr-44’)</p>
<p>This is not so complicated! Is it? It is to be mentioned here that the identity in the database is also being captured so that it can be employed afterwards.  The highlighted and underlined code implies that whatever has been matched with the 2nd group, a ‘-’, and the 1st group is to be replaced.</p>
<p>Employing numbers might not be easy to follow and also sustain. Therefore let us go through what is provided by python via the re-module to aid this.</p>
<p> </p>
<p><strong>Named groups:</strong></p>
<p>It is hoped that you understand the example from the previous chapter:</p>
<p>&gt; &gt; &gt; pattern = re.compile( r"(\ w +) (\ w +)")</p>
<p>&gt; &gt; &gt; match = pattern.search("Hi⇢ world")</p>
<p>&gt; &gt; &gt; match.group( 1)</p>
<p>'Hi'</p>
<p>&gt; &gt; &gt; match.group( 2)</p>
<p>'world'</p>
<p>Now we already have an understanding of the way of accessing groups by employing indexes for the extraction of data and also employing it as back references. Employing numbers to mention groups could be difficult and pretty confusing and the worst case scenario is that it does not assist to provide meaning to the group. Hence the groups have been named.</p>
<p>Consider a regular expression wherein you are having a number of back references (say 20) and you discover that the 3rd one is not valid. Therefore you delete it from the regular expression. This implies that you have to alter the index for each back reference beginning from that one onwards. For resolving this issue, Guido Van Rossum in the late ninety nineties discovered named groups for Python 1.5. This was also provided to Perl for the purpose cross-breeding.</p>
<p>In the present scenario, it can be discovered in any every flavor. Basically, it enables us to offer names to the groups enabling them to be known by their names each time a group is used. For employing it every time we have to employ the syntax (?P&lt;name&gt;pattern), wherein the P arrives from the specialized python extensions.</p>
<p>We will now see how this actually operates with a previously mentioned example in the given code piece.</p>
<p>&gt;&gt;&gt;pattern= re.compile (r “(?P &lt;one&gt;\w+)”) (?P&lt;two&gt;\w+)”)</p>
<p>&gt;&gt;&gt;match=re.search (“Hi world”)</p>
<p>&gt;&gt;&gt;match.group (“one”)</p>
<p>‘Hi’</p>
<p>&gt;&gt;&gt;match.group (“two”)</p>
<p>‘world’</p>
<p>Hence the maintenance of backreferences is easy and usage is really simple as is obvious in the example described below:</p>
<p>&gt;&gt;&gt;pattern= re.compile (r “( ?P&lt;Country&gt;\d+)-(?P&lt;identity&gt;\w+)”)</p>
<p>&gt;&gt;&gt;pattern.sub (r “\g&lt;identity&gt;-\g&lt;country&gt;”, “1-a\n30-baer\n44-afcr”)</p>
<p>‘a-1\nbaer-30\nafcr-44’</p>
<p>As can be noticed from the above example, for the sake of referencing a group by the name in the sub-operation, we must employ \g&lt;name&gt;.</p>
<p>We may also employ named groups in the pattern. This is described in the example given below:</p>
<p>&gt;&gt;&gt;pattern=re.compile (r “?P&lt;word&gt;\w+”) (?P=word)”)</p>
<p>&gt;&gt;&gt;match=pattern.search (r “hi hi world” )</p>
<p>&gt;&gt;&gt;match.groups ()</p>
<p>(‘hi’,)</p>
<p>This is easier and definitely clearer as compared to using numbers.</p>
<p>In all these examples, we have employed the 3 different methods of mentioning named groups.</p>
<p> </p>
<p>Used</p>
<p>Syntax</p>
<p>It is employed inside a pattern</p>
<p>(?P=name)</p>
<p>It is employed in MatchObject’s tasks</p>
<p>Match.group (‘name’)</p>
<p>It is employed in the sub operation’s repl string</p>
<p>\g&lt;name&gt;</p>
<p> </p>
<p><strong>Atomic groups:</strong></p>
<p>They can be considered as special instances of non-capturing groups. Normally, they are employed for improving the performance. It deactivates backtracking, hence with them you may get rid of cases where trying all possibilities in the pattern does not seem appropriate. It is not so easy to be understood. The re module does not back atomic groups. Hence, for seeing an example, we will employ the regular expression module.</p>
<p>Consider, we need to look for an identity comprising of 1 or more than 1 alphanumeric character trailed by a ‘-’ and a digit.</p>
<p>&gt;&gt;&gt;info = “aabbaaccdddddddaaaaaa”</p>
<p>&gt;&gt;&gt;regex.match (“(\w+)-\d”, info)</p>
<p>We will see what is happening here one by one:</p>
<p>1. The 1st is a matched by the regular expression engine.</p>
<p>2. After this each character is matched till the string finishes.</p>
<p>3. It is unable to find ‘-’, hence it fails.</p>
<p>4. Hence the regular expression engine implements backtracking and attempts the matching again with the next a.</p>
<p>5. Perform the same steps again.</p>
<p>This is attempted with each character. When you carefully analyze what we are attempting, you will be forced to think that there is no point of attempting it again when we have not been successful in the first attempt. This is where the atomic groups find their application.</p>
<p>&gt;&gt;&gt;regex.match  (“(?&gt;\w+)-\d”,info)</p>
<p>In this case,?&gt; has been added which shows an atomic group. Hence, when the regular expression engine is unsuccessful in matching, it will not keep on attempting with every left character in the info.</p>
<p> </p>
<p><strong>Specialized cases with groups:</strong></p>
<p>Python offers with groups that can aid us to change the regex or match a pattern if only the preceding group is there. For example: if statement.</p>
<p> </p>
<p><strong>Yes or No pattern:</strong></p>
<p>It is a very helpful case of groups. It attempts to match a pattern if there exists a preceding one for it. On the contrary, no match is attempted if there is no preceding group is discovered. To be precise, it is similar to an ‘if-else statement’. Its syntax is given below:</p>
<p>( ?(id/name) yes-pattern|no-pattern)</p>
<p>This implies when the group with this identity is matched, then the yes pattern needs to match. On the contrary, if there is no match, the y-pattern must be matched.</p>
<p>Let us figure out how it functions. There is a product list. It is to be noted that the identity (ID) can be created by two distinct methods.</p>
<p>·The code of the country which is 2 digit, a ‘-’, 3 or 4 alphanumeric letters, a ‘-’ and the code of the area which is again a 2 digit number. To exemplify: 44-def1-01.</p>
<p>·3 or 4 alphanumeric letters. To exemplify, def1.</p>
<p>Hence in case there is a country code, the country area must be matched.</p>
<p>&gt;&gt;&gt;pattern=re.compile (r” (\d\d-)? (\w {3,4}) (? (1) (-\d\d))”)</p>
<p>&gt;&gt;&gt;pattern.match (“44-def1-01”)</p>
<p>&lt;sre.SRE_Match at 0x10f68b7a1&gt;</p>
<p>&gt;&gt;&gt;pattern.search (“erte”)</p>
<p>&lt;_sre.SRE_Match at 0x10f68b829&gt;</p>
<p>You might notice it from the preceding example; a match is found when the country and area code are given. Also, there is no match in case there is no area code, while the country code is still there.</p>
<p>&gt;&gt;&gt;pattern.search (“44-defl”)</p>
<p>None</p>
<p>Now we will add one more limitation to the preceding example, if there is no country code, then there should be a name when the string concludes.</p>
<p>&gt;&gt;&gt;pattern =re.compile (r “(\d\d-)? (\w {3, 4})-(? (1) (\d\d) |[a-z]{3,4}) $” )</p>
<p>&gt;&gt;&gt;pattern.match (“44-def1-22”)</p>
<p>&lt;_sre.SRE_Match at 0x10f6ee740&gt;</p>
<p>As anticipated, when there is a country code as well as an area code, the outcome is that a match has been found.</p>
<p>&gt;&gt;&gt;pattern.match (“44- def1”)</p>
<p>None</p>
<p>In the previous example, there is a country code but not any area code, hence there does not exist any match.</p>
<p>&gt;&gt;&gt;pattern.match (“def1- fghi”)</p>
<p>&lt;_sre.SRE_Match at 0x10f6ee888&gt;</p>
<p>In this case, there is no country or area, but fghi name is there. So a match if found.</p>
<p>It is to taken into consideration that the ‘no-pattern’ is selective. Hence we have not used it in our example.</p>
<p> </p>
<p><strong>Overlapping groups</strong></p>
<p>Overlapping can be very confusing at times and it seems to confuse a number of people. Hence, we will try to make it clearer with an easy example.</p>
<p>&gt;&gt;&gt;re.findall (r ‘(b|c) +’, ‘bcbdb’)</p>
<p>[‘b’, ‘b’]</p>
<p>The characters bcd are matched, but only b comprises of the captured group. It is so as even if our regular expression has grouped all the characters, it will stay with the b that is in the end. It must not be forgotten that since it explains how it functions. Halt for some time and imagine it, the regular expression is requested that it has to capture the groups comprising of b or c, but only for a single character among all and that is the main point. Hence, what is the way of capturing groups that have been comprised of several ‘b’ and ‘c’ in any order?</p>
<p>The catch here is the expression given below:</p>
<p>&gt;&gt;&gt;re.findall (r ‘(?:b|c)+)’, ‘bccbdb’)</p>
<p>[‘bccb’, ‘b’]</p>
<p>In this, we are actually making a request to the regular expression engine to capture each of the group that comprises of the subexpression (b|c) and not group merely a single character.</p>
<p>Also, it is to be noted that in case we want to have each group which comprises of b or c with findall, we might compose this easy expression,</p>
<p>&gt;&gt;&gt;re.findall (r ‘(b|c)’, ‘bcbdb’)</p>
<p>[‘b’, ‘c’, ‘b’, ‘b’]</p>
<p>Here a request is made to the regular expression engine to capture a group which comprises of b and c. Since we are employing findall, we have each pattern matched; hence we are having 4 groups.</p>
<p>Note: It is more advisable to keep regex as easy it can be. Hence, you must start with the easiest expression and after that create more complicated expressions in a stepwise manner.</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>The third chapter may seem an easy one but you must make sure that you are thorough with all the basics explained in this chapter. They will definitely aid in dealing with regular expressions in a better manner. Now that you have gone through this chapter, you must have been able to have a good understanding of expressions with regular expressions. You must have been familiar with groups like named groups, atomic groups and have a better exposure to backreferences. Lastly, the chapter introduces special cases with regular expressions and so you must have been able to know how to use yes/no pattern and as well as how to deal with overlapping in a better way.</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>What will be the outcome for</p>
<p>&gt;&gt;&gt;pattern=re.compile (r “(\w+) \1”)</p>
<p>&gt;&gt;&gt;match=pattern.search(r“hi hi world”)</p>
<p>&gt;&gt;&gt;match.groups ()</p>
<p>Answer: (‘hi’,)</p>
<p>  
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>What is the result of the outcome of</p>
<p>&gt;&gt;&gt;pattern=re.compile (r “(\w+)”)</p>
<p>&gt;&gt;&gt;it= pattern.finditer(r “\2-\1”, “1-a\n30-baer\n44-afcr”)</p>
<p>Answer: (‘a-1\nbaer-30\nafcr-44’)</p>
<p>  
   <strong><emphasis>Exercise 3</emphasis></strong></p>
<p>What is the outcome for</p>
<p>&gt; &gt; &gt; pattern = re.compile( r"(\ w +) (\ w +)")</p>
<p>&gt; &gt; &gt; match = pattern.search("Hi⇢ world")</p>
<p>&gt; &gt; &gt; match.group( 1)</p>
<p>Answer: ‘Hi’</p>
<p>  
   <strong><emphasis>Exercise 4</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt;pattern=re.compile (r “?P&lt;word&gt;\w+”) (?P=word)”)</p>
<p>&gt;&gt;&gt;match=pattern.search (r “hi hi world” )</p>
<p>&gt;&gt;&gt;match.groups ()</p>
<p>Answer: (‘hi’,)</p>
<p>  
   <strong><emphasis>Exercise 5</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt;pattern =re.compile (r “(\d\d-)? (\w {3, 4})-(? (1) (\d\d) |[a-z]{3,4}) $” )</p>
<p>Answer: None</p>
<p>  
   <strong><emphasis>Exercise 6</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt;re.findall (r ‘(b|c) +’, ‘bcbdb’)</p>
<p>Answer: [‘b’, ‘b’]</p>
<p>  
   <strong><emphasis>Exercise 7</emphasis></strong></p>
<p>Which one among the following will be the outcome of</p>
<p>&gt;&gt;&gt;re.findall (r ‘(b|c)’, ‘bcbdb’)</p>
<p>Answer: [‘b’, ‘c’, ‘b’, ‘b’]</p>
<p>  
   <strong><emphasis>Exercise 8</emphasis></strong></p>
<p>What will be the outcome for</p>
<p>&gt;&gt;&gt;re.findall (r ‘(?:b|c)+)’, ‘bccbdb’)</p>
<p>Answer: [‘bccb’, ‘b’]</p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 7: Look Around</strong></p>
<p> </p>
<p><strong>Chapter Objective: </strong>The main objective of this chapter is centered at making the readers familiar with the concept of look around. The chapter introduces the idea of zero-with assertions and the way it can be helpful to discover the precise thing in a text not interfering in the content of the outcome. The chapter also leverages the 4 kinds of look around processes: positive look ahead, positive look ahead, negative look ahead as well as negative look behind. Once you have gone through this chapter, you must be able to have an idea of these are to be employed and manipulated in the regular expressions used in python.</p>
<p> </p>
<p>Till now, you must have been familiar with mechanisms to match characters when they are being cast-off.  It is not possible to match a character that has already been matched. In order to match it it has to be discarded.</p>
<p>A contradiction to this a variety of metacharacters : the zero-width assertions. They show positions instead of the real content. For example, the (^) sign denotes the starting of a line or the ($) symbol stands for the finish of the line. They simply make sure whether the location of the input is right without really consuming any character.</p>
<p>A comparatively stronger type of the zero-width assertion is look around. It is a process in which enables the matching of some particular look behind which means the preceding one or look ahead which means the hidden one to the present position. They perform assertion efficiently not consuming characters; they simply return an affirmative or negative outcome of the match.</p>
<p>The process of look around is possibly the most unknown and yet the strongest mechanism in regex. This process enables us to make strong regexes which cannot be created otherwise. The reason for this can be complication that it might offer or simply due to technical boundaries of regexes without look around.</p>
<p>This chapter mainly deals with leveraging the look around process by employing Python regexes. We will learn the way these function and the few boundaries that they are having.  Types of look ahead and look behind:</p>
<p>Positive Look Behind: This process is denoted as an expression preceded by a ‘?’, ‘&lt;’ sign, ‘=’ clustered inside a parenthesis block.  To exemplify, the (?&lt;=regex )  shall map whether the passed regular expression does map with the preceding input.</p>
<p>Negative Look Ahead: This process is denoted as an expression that is preceded by a ‘?’ and an ‘!’ inside the ‘()’ block. To exemplify, (?!regex) maps whether the passed regular expression does not match map against the upcoming input.</p>
<p>Positive Look Ahead: This method is denoted as an expression preceded by a ‘?’ and ‘=’ symbol. To exemplify, (?=regex) shall map whether the passed regular expression does map against the upcoming input.</p>
<p>Negative Look Behind: This process is denoted as an expression preceded by ‘?’, ‘&lt;’ and ‘!’. To exemplify, (?&lt;!regex) will map whether the passed regular expression does not map against the preceding input.</p>
<p> </p>
<p><strong>Look Ahead</strong></p>
<p>The maiden look around process that we will go through is the look ahead process. It attempts to match the ahead the subexpression that has been conceded as an argument. As we are already familiar from the preceding section, it id denoted as an expression that is preceded by a ‘?’ and ‘=’ symbol wrapped inside a ‘()’.</p>
<p>Let’s have a furthermore understanding of this by making a comparison between two regexes. Consider the example:</p>
<p>&gt;&gt;&gt;pattern=re.compile (r’vixen’)</p>
<p>&gt;&gt;&gt;result=pattern.search (“The fast brown vixen climbs over the lazy bitch”.)</p>
<p>&gt;&gt;&gt;print result.start (), result.end  ()</p>
<p>17 20</p>
<p>We simply searched ‘vixen’ in the input string and it was searched in between the index ‘17’ and ‘20’. No we will go through the how the look ahead process works.</p>
<p>&gt;&gt;&gt;pattern=re.compile (r ‘(?=vixen)’)</p>
<p>&gt;&gt;&gt;result=pattern.search (“The fast brown vixen climbs over the lazy bitch”)</p>
<p>&gt;&gt;&gt;print result.start (), result.end ()</p>
<p>17 17</p>
<p>Since the (?=vixen) is applied, the outcome is simply a position at the 17 index.  It is so since look around is not absorbing characters and hence can be employed for filtering where the expression must be matched.</p>
<p>To have a furthermore understanding of this we will again attempt and match a word trailed by a ‘,’ by employing the regex /r’<strong>\</strong>+(?=,)’/ as well as the text. They were three: Henry, Cursor; and Barem:</p>
<p>&gt;&gt;&gt;pattern= re.compile (r ‘<strong>\</strong>w+(?=,)’)</p>
<p>&gt;&gt;&gt;pattern.findall (“They were three: Henry, Cursor, and Barem.”)</p>
<p>[‘Henry’, ‘Cursor’]</p>
<p>We made a regex which accepts any repetition of characters trailed by a ‘,’ character, which is not being employed as a portion of the outcome. Hence, simply Henry and Cursor appeared as an outcome since Barem did not have a “,” following the name.</p>
<p>In order to have any idea of how distinct it was as compared to the regexes we went through till now in this chapter. We will have a comparison of the outcomes by applying /<strong>\</strong>w+,/ to the  text.</p>
<p>&gt;&gt;&gt;pattern=re.complie (r ‘<strong>\</strong>w+,’)</p>
<p>&gt;&gt;&gt;pattern.findall (“They were three: Henry, Cursor and Barem.”)</p>
<p>[‘Henry’, ‘Cursor’]</p>
<p>With the preceding regexes, we asked the regexes to take any repetition of characters followed by a ‘,’ character. Hence the character and ‘,’ character would be returned.</p>
<p>It is to be noted here that the look ahead process is another process which can be leveraged with all the strength of the regexes. Hence, we might employ all the constructions that we went through till now as the alteration.</p>
<p>&gt;&gt;&gt; pattern= re.compile (r ‘<strong>\</strong>w+ (?=.)’)</p>
<p>&gt;&gt;&gt;pattern.findall (“They were three: Henry, Cursor and Barem”)</p>
<p>In the previous example, we employed alternation, but we could have other easier techniques in order to accept any recurrence of the characters trailed by a ‘,’ or ‘.’ character which is not going to be employed as a part of the outcome.</p>
<p>Negative Look Ahead:</p>
<p>This process offers a similar nature as compared to the look ahead though with a noteworthy difference: the outcome would be legal when subexpression is not matching.</p>
<p>It is helpful in case we wish to show what must not happen. To exemplify, to search any name Jahn that is not Jahn Dmith, we might do as described below:</p>
<p>&gt;&gt;&gt;pattern=re.compile (r ‘Jahn (?!<strong>\</strong>sBmith)’)</p>
<p>&gt;&gt;&gt;result= pattern.finditer (“I shall rather out go out with Jahn McLume than with Jahn Bmith or Jahn Con Movi”)</p>
<p>&gt;&gt;&gt; for i in result:… print  i.start (), i.end ()</p>
<p>…</p>
<p>27 31</p>
<p>63 67</p>
<p>In the previous example, we searched for Jahn by consuming all the 5 characters and after that for a whitespace character trailed by word Bmith. If there is a match, it will comprise of only the beginning and the final position of Jahn. Here they are 27-31 for Jahn McLume as well as 63-67 for Jahn Con Mavi.</p>
<p>Now that we have an understanding of the basics of look around, let us have a furthermore understanding of how to employ in them substitutions and groups.</p>
<p>Substitutions and Look around:</p>
<p>For substitutions, the zero width nature of the look around operation is extremely helpful. As a result of them, we are able to do transformations that shall be otherwise be highly complicated for both reading and writing.</p>
<p>One main example of this would be changing numbers comprising of simply numeric characters like 12345, into a ‘,’ separated number which means: 1, 234, 5.</p>
<p>For writing this regex, we have to have a plan to follow. We intend to cluster the numbers in blocks of 4 which will then be replaced by the same group plus a ‘,’ character.</p>
<p>We might easily begin with a raw approach with the below underlined regex.</p>
<p>&gt;&gt;&gt;pattern= re.compile (r ‘<strong>\</strong>d{1,4}’)</p>
<p>&gt;&gt;&gt;pattern.findall (“The number is 4567890145”)</p>
<p>[‘4567’, ‘8901’, ‘45’]</p>
<p>We have not been successful in this try. We are efficiently grouping in blocks of four characters, but they should be considered from the right to the left. We require another approach. Let us attempt to search 1, 2, 3 or 4 digits which need to be followed any block number of 4 digits till we discover something which is not a digit.</p>
<p>It will affect the number as follows:</p>
<p>While attempting to discover 1, 2 or 3 digits, the regex will attempt to take only 1 and it will be number one. After this, it will attempt to catch blocks of precisely four numbers, for example, 4567890145 till it discovers a non-digit. This is the finish of the input. If we show a regex what we now explained in simple English, we shall get something given below:</p>
<p>/\ d {1,4} (?= (/d {4}) + (?!\d))/</p>
<p> </p>
<p><strong>Look Behind:</strong></p>
<p>Look Behind can be easily defined as the antonym of look ahead. It attempts to match behind the subexpression conceded as an argument. Also, it has a 0-width nature and hence will not be a portion of the outcome.</p>
<p>We might employ it in an example comparable to the one we employed in negative look ahead to search simply the surname of somebody named Jahn McLume. In order to achieve this, we might compose a look behind the one given below:</p>
<p>&gt;&gt;&gt;pattern=re.compile (r’ (?=&lt;=Jahn\s) McLume’)</p>
<p>&gt;&gt;&gt;result=pattern.finditer (“I shall rather out go out with Jahn McLume than with Jahn Bmith or Jahn Con Movi”)</p>
<p>&gt;&gt;&gt;for i in result:</p>
<p>…   print  i.start (), i.end ()</p>
<p>…</p>
<p>32 28</p>
<p>With the previous look behind, we demanded the regular expression engine to match only those expressions that Jahn as well as white space to then consume McLume as an outcome.</p>
<p>There is a distinction in the basic module of python in the way look ahead and look behind are put into implementation. Owing to number technical causes, the look behind process is just able to match fixed-width patterns. They do not have variable length matchers like backreferences are not permitted either. Alternation is enabled but only when alternatives are having the similar length. Also, these restrictions are not there in abovementioned regular expression module.</p>
<p>There is an exception since look behind needs a fixed-width pattern. A similar result will be gotten by us when we attempt the application of quantifiers or other altering length constructions.</p>
<p>Since, we are familiar with the methods of matching ahead or behind the while not using characters and the various limitations we might encounter, we might attempt to compose another example that embraces a few of the processes which have learnt to solve a real-world issue.</p>
<p> </p>
<p><strong>Negative Look Behind:</strong></p>
<p>This process offers extremely similar nature of the look behind process. But there is an effective outcome only when the passed subexpression is not mapping. It is worth noticing that negative look behind shares the various features of the look behind mechanism as well as its restrictions. The negative look behind process is merely able to match fixed-width patterns. They are having the similar cause and consequences that we went through in the preceding section.</p>
<p>We might have a practical implementation of this by attempting to match any person who has been surnamed as Boe and is not named Jahn with a regex like: / (?&lt;!Jahn<strong>\</strong>s) Boe/. If we employ it in Python’s console, we will get the result given below:</p>
<p>&gt;&gt;&gt;pattern=re.compile (r‘(?&lt;!Jahn<strong>\</strong>s) Doe’)</p>
<p>&gt;&gt;&gt;results=pattern.finditer (“Jahn Boe, Calvin Boe, Hobbey Boe”)</p>
<p>&gt;&gt;&gt; for result in results:</p>
<p>…   print result.start (), result.end ()</p>
<p>…</p>
<p>17 20</p>
<p>29 32</p>
<p> </p>
<p><strong>Look around and groups:</strong></p>
<p>There is an important application of look around constructions and it is the inside groups. Generally when groups are employed, a very precise outcome needs to be mapped and returned to the group. Since we do not pollute the groups with the data that is not needed, in other potent groups, we might leverage look around as a promising answer.</p>
<p>Suppose, we wish to have a comma partitioned value, the maiden portion of the value is a name whereas the 2nd is a value, it will be having a format like:</p>
<p>INFO 2014-09-17 12:15: 44, 488</p>
<p>As we have already that we may easily acquire these 2 values as:</p>
<p>/<strong>\</strong>w+<strong>\</strong>s[<strong>\</strong>d-]+<strong>\</strong>s[<strong>\</strong>d:,]+<strong> \</strong>s(.*<strong>\</strong>sfailed)/</p>
<p>Though, we simply wish to match in case there is an authentication failure.</p>
<p>We might achieve this by summing a negative look behind. It will appear as follows:</p>
<p>/<strong>\</strong>w+<strong>\</strong>s[<strong>\</strong>d-]+<strong>\</strong>s[<strong>\</strong>d:,]+ <strong>\</strong>s(.*<strong>\</strong>? &lt;! Authentication failed<strong>\</strong>s) failed) /</p>
<p>When this is applied to python’s console, the below input will be achieved:</p>
<p>&gt;&gt;&gt;pattern=re.compile (r ‘<strong>\</strong>w+<strong>\</strong>s[<strong>\</strong>d-]+<strong>\</strong>s[<strong>\</strong>d:,]+<strong> \</strong>s(.*(?&lt;!authentication failed )’)</p>
<p>&gt;&gt;&gt;pattern.findall (“INFO 2014-09-17 12:15:44, 448 authentication failed)</p>
<p>[]</p>
<p>&gt;&gt;&gt;pattern.findall (“INFO 2014-09-17 12:15:44,448” something else was unsuccessful)</p>
<p>[‘Something else was unsuccessful’]</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, you must have been able to have an idea about zero-with assertions and the way it can be helpful to discover the precise thing in a text not interfering in the content of the outcome.</p>
<p>We also went through how to leverage the 4 kinds of look around processes: positive look ahead, positive look ahead, negative look ahead as well as negative look behind.</p>
<p>After going through this chapter, the travel through the fundamental and advanced techniques around regexes is expected to have been concluded for the readers.</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>What will be the outcome of</p>
<p>&gt;&gt;&gt;pattern= re.compile (r ‘<strong>\</strong>w+(?=,)’)</p>
<p>&gt;&gt;&gt;pattern.findall (“They were three: Henry, Cursor, and Barem.”)</p>
<p>Answer: [‘Henry’, ‘Cursor’]</p>
<p>  
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>What will be the outcome of</p>
<p>&gt;&gt;&gt;pattern= re.compile (r ‘<strong>\</strong>d{1,4}’)</p>
<p>&gt;&gt;&gt;pattern.findall (“The number is 4567890145”)</p>
<p>[‘4567’, ‘8901’, ‘45’]</p>
<p>  
   <strong><emphasis>Exercise 3</emphasis></strong></p>
<p>What will be outcome of</p>
<p>&gt;&gt;&gt;pattern=re.compile (r ‘<strong>\</strong>w+<strong>\</strong>s[<strong>\</strong>d-]+<strong>\</strong>s[<strong>\</strong>d:,]+<strong> \</strong>s(.*(?&lt;!authentication failed )’)</p>
<p>&gt;&gt;&gt;pattern.findall (“INFO 2014-09-17 12:15:44, 448 authentication failed)</p>
<p>Answer: [ ]</p>
<p>  
   <strong><emphasis>Exercise 4</emphasis></strong></p>
<p>What will be the outcome of</p>
<p>&gt;&gt;&gt;pattern.findall (“INFO 2014-09-17 12:15:44,448 ” something else was unsuccesful)</p>
<p>[‘Something else was unsuccessful’]</p>
<p>  
   <strong><emphasis>Exercise 5</emphasis></strong></p>
<p>Which one among the following is denoted as an expression preceded by a ‘?’, ‘&lt;’ sign, ‘=’ clustered inside a parenthesis block?</p>
<p>a) Positive Look Behind</p>
<p>b) Negative Look Ahead</p>
<p>c) Positive Look Ahead</p>
<p>d) Negative Look Behind</p>
<p>The correct answer is (a)</p>
<p>  
   <strong><emphasis>Exercise 6</emphasis></strong></p>
<p>Which one among the following is denoted as an expression that is preceded by a ‘?’ and an ‘!’ inside the ‘()’ block?</p>
<p>a) Positive Look Behind</p>
<p>b) Negative Look Ahead</p>
<p>c) Positive Look Ahead</p>
<p>d) Negative Look Behind</p>
<p>The correct answer is (b)</p>
<p>  
   <strong><emphasis>Exercise 7</emphasis></strong></p>
<p>Which one among the following is denoted as an expression preceded by a ‘?’ and ‘=’ symbol?</p>
<p>a) Positive Look Behind</p>
<p>b) Negative Look Ahead</p>
<p>c) Positive Look Ahead</p>
<p>d) Negative Look Behind</p>
<p>The correct answer is (c)</p>
<p>  
   <strong><emphasis>Exercise 8</emphasis></strong></p>
<p>Which one among the following is denoted as an expression preceded by ‘?’, ‘&lt;’ and ‘!’ ?</p>
<p>a) Positive Look Behind</p>
<p>b) Negative Look Ahead</p>
<p>c) Positive Look Ahead</p>
<p>d) Negative Look Behind</p>
<p>The correct answer is (d)</p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 8: Measuring performance of regexes</strong></p>
<p> </p>
<p><strong>Chapter Objective:</strong></p>
<p>The main objective of this chapter is to give the readers an understanding of performance. Firstly the chapter deals with benchmarking a regular expression in python and for the sake of benchmarking our regular expression, the time is calculated that a regular expression takes to implement. It is vital that they are to be tested with distinct inputs, since with minor inputs; almost all regular expressions are very quick. The chapter also provides a furthermore understanding of the DEBUG flag and debugging in regex buddy tool. Lastly, it makes the readers familiar with how backtracking enables heading back and getting the distinct paths of the regex and how it is employed.</p>
<p> </p>
<p>Till now, we were mainly centered at knowing the way a feature is leveraged to achieve an outcome without bothering too much about how quick the process is going to be. Our main aims were accuracy as well as readability.</p>
<p>The fifth chapter mainly deals with an entirely different issue that is performance. Though we will discover that most of the times the increase in performance will ruin the readability. When we are changing something to make it quicker, we are actually making it simpler for the machine to comprehend and hence we are possibly compromising on human readability.</p>
<p>How to benchmark regexes with python:</p>
<p>For the sake of benchmarking our regular expression, we shall calculate the time a regular expression takes to implement. It is vital that they are to be tested with distinct inputs, since with minor inputs; almost all regular expressions are very quick. Though with lengthier ones, it might be totally different. We will have a furthermore understanding of this in the backtrack section.</p>
<p>Now, we will make a small function to aid us with this task:</p>
<p>&gt;&gt;&gt;from time import clock as now</p>
<p>&gt;&gt;&gt;def test (f, *args, **kargs):</p>
<p>Start=now ()</p>
<p>f (*args, **kargs)</p>
<p>print “The function %s stayed”:</p>
<p>%f “ %(f.___name___, now () - start)</p>
<p>Hence, we may examine a regular expression by employing the code given below:</p>
<p>&gt;&gt;&gt;def change(text):</p>
<p>pat=re.compile (‘spa (in|niard)’)</p>
<p>pat.search (text)</p>
<p>&gt;&gt;&gt;test (change, “spain”)</p>
<p>The function change stayed:</p>
<p>0.000009</p>
<p>There is an inherent profiler in python that can be employed to calculate the time and count the calls.</p>
<p>&gt;&gt;&gt;import cProfile</p>
<p>&gt;&gt;&gt;</p>
<p>cProfile.run (“change (‘spaniard’)”)</p>
<p>Let us go through another helpful method which is going to aid you when you want to examine what is happening under the hook of your regular expression.</p>
<p>We will have a furthermore understanding of this by using the flag DEBUG which we are already familiar with:</p>
<p>The DEBUG flag provides us the info about the way a pattern is to be assembled. To exemplify:</p>
<p>&gt;&gt;&gt;re.compile( (‘<strong>\</strong>w+<strong>\</strong>d+)+-<strong>\</strong>d\d’,re.DEBUG)</p>
<p>max_repeat  1  4294967296</p>
<p>subpattern  1</p>
<p>max_repeat 1</p>
<p>4294967296</p>
<p> in</p>
<p>              category</p>
<p>category_word</p>
<p>max_repeat 1</p>
<p>4294967296</p>
<p>in</p>
<p>  category</p>
<p>  category category_digit</p>
<p>              literal 45</p>
<p>in</p>
<p>category category_digit</p>
<p>in</p>
<p>category category_digit</p>
<p>It can be noticed here that there are 3 max_repeat conditions from 1 to 4294967296, 2 of them are in another max_repeat.</p>
<p>They can be considered as nested loops. But this is not so advisable and it might result in a catastrophic backtracking. We will go through it in the coming sections.</p>
<p> </p>
<p><strong>The RegexBuddy Tool:</strong></p>
<p>As compared to all other tools that are there for improved productivity while composing regexes, the RegexBuddy Tool is an excellent option. It has been developed by Just Great Software Co. Limited. The main person behind this being Jan Goyvaerts. Regexbuddy enables us to employ visual interface for creating, examining and debudgging regexes. The debug characteristic is almost exclusive and offers a good process to access how the regex engine is operating behind the scenes. The picture given below shows the Regexbuddy debugging the regex’s implementation.</p>
<p> </p>
<p> <image l:href="#img_1"/></p>
<p> </p>
<p>RegexBuddy debugging a regex</p>
<p>It certainly has other characteristics such as a library of generally employed regexes as well as a code generator for various programming atmospheres. There are certain shortcomings that is comes with. Its license is copyrighted and the only build obtainable is for Microsoft windows.  Though, the implementation on Linux by employing the wine emulator is there.</p>
<p> </p>
<p><strong>Going through the Python regular expression engine:</strong></p>
<p>The re-module employs a backtracking regex engine. The most important characteristics of the algorithm are listed below:</p>
<p>·         It backs lazy quantifiers like *?, ?? and +?</p>
<p>·         It maps the maiden co-incidence though there are lengthier ones in the string. This implies that order is critical.</p>
<p>·         The algo tracks only a single transition in one step that implies that engine checks a single character at a single incidence of time.-</p>
<p>·         It backs ‘()’ as well as backreferencing.</p>
<p>·         Backtracking is the capability of recalling the last productive position so that it might head back and retry if needed.</p>
<p>·         In the poorest scenario, the complexity is exponential.</p>
<p> </p>
<p><strong>Backtracking</strong></p>
<p>As has been described previously backtracking enables heading back and getting the distinct paths of the regex. This is performed by recalling the last productive position. It applies to quantifiers as well as alternation.</p>
<p>An established issue with backtracking is known as catastrophic backtracking that can offer you various issues ranging from a slow regular expression to a crash with a stack overflow. The issue comes into picture when in case the regular expression is not successful in matching the strings. We will benchmark a regular expression with a method we have encountered formerly so that we can have a better understanding of the issue.</p>
<p>Let us attempt an easy regular expression:</p>
<p>&gt;&gt;&gt;def catastrophic (n):</p>
<p>Print “Testing with %d characters” %n</p>
<p>Pat=re.compile (‘b’ +’c’)</p>
<p>Text= “%s” % (‘b’ *n)</p>
<p>              Pat.search (text)</p>
<p>Since there is not the presence of any ‘c’ in the end, the text that is being attempted to match is never going to be successful.</p>
<p>We shall now test it various inputs.</p>
<p>&gt;&gt;&gt;for n in range (30, 40):</p>
<p>Test (catastrophic, n)</p>
<p>Testing with 30 characters</p>
<p>The function lasted: 0.130457</p>
<p>Testing with 31 characters</p>
<p>The function lasted: 0.245125</p>
<p>……</p>
<p>The function lasted: 14.828221</p>
<p>Testing with 38 characters</p>
<p>The function lasted: 29.830929</p>
<p>Testing with 39 charcters</p>
<p>The function lasted: 61.110949</p>
<p>The conduct of this regular expression appears as if it were quadratic. The matter here is that (b+) turns greedy, therefore it attempts to fetch as many b characters as possible. Then it fails to match the c which means that it backtracks to the second and continues consuming b characters till it fails to map c. After that, it attempts the whole process again beginning with a second b character.</p>
<p>Let us go through another example. An exponential behavior for this case:</p>
<p>Def catstrophic (m):</p>
<p>Print “Testing with %d characters” %m</p>
<p>Pat= re.compile (‘(x)+(b)+c’)</p>
<p>Text=’x’*m</p>
<p>Text+=’b’*m</p>
<p>Pat.search (text)</p>
<p>Form in range (12,18)</p>
<p>Test (catastrophic, m)</p>
<p>Testing with 12 characters:</p>
<p>The function catastrophic lasted: 1.035161</p>
<p>Testing with 13 characters:</p>
<p>The function catastrophic lasted: 4.084713</p>
<p>Testing with 14 characters:</p>
<p>The function catastrophic lasted: 16.31916</p>
<p>Testing with 15 characters:</p>
<p>The function catastrophic lasted: 65.855181</p>
<p>Testing with 16 characters:</p>
<p>The function catastrophic lasted: 276.941307</p>
<p>As can be seen, the behavior is exponential that might result in exponential outcomes.</p>
<p>.</p>
<p><strong>Recommendations for Optimization:</strong></p>
<p>In the coming sections, there will be a variety of recommendations which could be applied to improvise regexes. The most effective tool would be common sense, ofcourse and it will be required even when recommendations are to be followed. It needs to be understood that once the recommendation is to be applied and when not. To exemplify, you cannot apply the ‘don’t be greedy’ recommendation for every instance.</p>
<p> </p>
<p><strong>Reuse</strong> <strong>Compiled Patterns:</strong></p>
<p>We have previously explained that in order to employ a regex, we need to transform it from its string representation to a form called RegexObject.</p>
<p>A little time is consumed by such kind of compilation. If we are employing the remaining module rather than employing the compile function to ignore making the RegexObject, we have to understand that the compiling is implemented anyway and various compiled RegexObject are cached automatically. Though while we are performing the compilation,, that cache will not support us. Each compile execution will take an approximately insignificant amount of time for a single execution, but it is certainly relevant if a number of executions are carried out.</p>
<p>Let us have a look at distinction between reusing and not reusing the compiled patterns in the example given below:</p>
<p>&gt;&gt;&gt;def dontreuse():</p>
<p>Pattern=re.compile (r ‘<strong>\</strong>bfoo<strong>\</strong>b’)</p>
<p>Pattern.match (“foo bar”)</p>
<p>&gt;&gt;&gt;def</p>
<p>Callninehundredninetyninetimes ():</p>
<p>For_in</p>
<p>range (999):</p>
<p>don’treuse()</p>
<p>&gt;&gt;&gt;</p>
<p>test(callninehundredninetynine times)</p>
<p>The function callninehundredninetyninetimes</p>
<p>lasted: 0.001964</p>
<p>&gt;&gt;&gt;pattern=</p>
<p>Re.compile (r ‘<strong>\</strong>bfoo<strong>\</strong>b’)</p>
<p>&gt;&gt;&gt;def reuse():</p>
<p>Pattern.match (“foo bar”)</p>
<p>&gt;&gt;&gt;def</p>
<p>call ninehundredninetyninetimes():</p>
<p>for_in</p>
<p>range (999):</p>
<p>reuse()</p>
<p>&gt;&gt;&gt;</p>
<p>Test(callninehundredninetyninetimes)</p>
<p>The function</p>
<p>Callninehundredninetyninetimes lasted: 0.000632</p>
<p>&gt;&gt;&gt;</p>
<p> </p>
<p><strong>Extraction of general portions in alternation</strong></p>
<p>In regexes, alternation is mostly performance risk. While employing them in Python, we must gather any common part on the external of the alternation.</p>
<p>For example, if we are having /(Hi⇢World|Hi⇢Continent|Hi⇢Country), we might conveniently extract Hi⇢with this expression: Hi⇢(world|continent|country)/. This shall allow our engine to simply check Hi⇢once and this shall not return to check again for every probability.</p>
<p>&gt;&gt;&gt;pattern=re.compile (r’/(Hi\sWorld│Hi\sContinent│Hi\sCountry’)</p>
<p><strong>&gt;&gt;&gt;</strong>def<strong> nonoptimized </strong>():</p>
<p>pattern.match (“Hi\sCountry”)</p>
<p>&gt;&gt;&gt; def callninehundredninetyninetimes ():</p>
<p>for_in</p>
<p>range (999):</p>
<p>nonoptimized ()</p>
<p>&gt;&gt;&gt;</p>
<p>test (callninehundredninetyninetimes)</p>
<p>The function callninehundredninetyninetimes)</p>
<p>The function callninetyhundredninetyninetimes lasted: 0.000644</p>
<p>&gt;&gt;&gt; pattern=re.compile (r ‘/Hi\s(World│Continent│Country)’)</p>
<p>&gt;&gt;&gt; def optimized ():</p>
<p>Pattern.match (“Hi\sCountry”)</p>
<p>&gt;&gt;&gt; def ninehundredninetynine ():</p>
<p>For_in</p>
<p>Range (999):</p>
<p>Optimized ()</p>
<p>&gt;&gt;&gt;</p>
<p>Test (callninehundredninetyninetimes)</p>
<p>The function callninetyninehundredninetytninetimes : 0.000543</p>
<p>&gt;&gt;&gt;</p>
<p> </p>
<p><strong>Shortcut to alternation:</strong></p>
<p>Ordering in alteration is applicable, each of the distinct options present in the alternation will be examined one after the other from left to right. This might be employed in in support of performance.</p>
<p>In case we place the more probable choices at the starting of the alternation, there will be more checks marking the alternation as mapped sooner.</p>
<p>To exemplify, we are aware that the more likely colors of cars are white as well as black. In case we are composing a regex to accept a few colors, we must place white and black first on priority since they have the maximum chances of coming into existence. We might frane the regular expression as explained below:</p>
<p>/(white│black│green│red│yellow)/</p>
<p>For the remaining elements, in case they comprise of the similar chances of appearing, it might be favorable to put the least ones before the lengthier ones:</p>
<p>&gt;&gt;&gt; pattern=re.compile (r’(white│black│green│red│yellow))</p>
<p>&gt;&gt;&gt; def optimized ():</p>
<p>Pattern.match (“white”)</p>
<p>&gt;&gt;&gt; def</p>
<p>Callninehundredninetyninetimes ():</p>
<p>For _in</p>
<p>Range (999):</p>
<p>Optimized ()</p>
<p>&gt;&gt;&gt;</p>
<p>Test (callninehundredninetyninetimes)</p>
<p>&gt;&gt;&gt; test (callninehundredninetyninetimes)</p>
<p>The function callninehundredninetyninetimes lasted: 0.000666</p>
<p>Employing non capturing groups when required:</p>
<p>Capturing groups would take a bit time for every defined in an expression. This duration is not very critical; though it is still applicable, the engine can aid us perform rapid integrity checks before the actual pattern mapping is carried out.</p>
<p>Sometimes, we employ groups though we might not be interested in the outcome, for example, when employing alternation. If that is the instance, we might save a little bit execution time of the engine by marking that group as non-capturing, to exemplify, (?:individual│company).</p>
<p> </p>
<p><strong>Be specific:</strong></p>
<p>In case the patterns, we define are particular, the engine can aid us perform rapid integrity checks before the actual pattern mapping is carried out. For example, when we forward the expression /\w{14}/ to the engine to map it against the text ‘hi’, the engine could make a decision to examine whether the input string is in fact  14 characters in length rather than mapping the expression.</p>
<p> </p>
<p><strong>Not being greedy:</strong></p>
<p>We have already gone through quantifiers in the preceding chapters and we studied the distinction between greedy and reluctant quantifiers. We also discovered that quantifiers are greedy by standard.</p>
<p>What would this imply in terms of performance? It implies that the engine would always attempt to catch the maximum number of characters possible and then reduce the scope in a stepwise manner till the mapping is accomplished.</p>
<p>This might potentially make the regex slow when the map is specifically short. It is to be considered that this only applies in case the map is generally short.</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, you must have an idea of performance. You must have learnt how to benchmark a regular expression in python and for the sake of benchmarking our regular expression, the time is calculated that a regular expression takes to implement. It is vital that they are to be tested with distinct inputs, since with minor inputs; almost all regular expressions are very quick. You must also have had a furthermore understanding of the DEBUG flag and debugging in regex buddy tool. You should have been familiar with how backtracking enables heading back and getting the distinct paths of the regex and should have had a better understanding of how it is employed</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>Who developed The Regex Buddy tool?</p>
<p>Answer: Just Great Software Co. Limited</p>
<p>  
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>Which mechanism enables heading back and getting the distinct paths of the regex?</p>
<p>Answer: Backtracking</p>
<p>  
   <strong><emphasis>Exercise 3</emphasis></strong></p>
<p>What provides us the info about the way a pattern is to be assembled?</p>
<p>Answer: DEBUG flag</p>
<p>  
   <strong><emphasis>Exercise 4</emphasis></strong></p>
<p>Who was the main person behind the RegexBuddy tool?</p>
<p>Answer: Jan Goyvaerts</p>
<p> </p>
<p>While compiling a pattern string into a pattern object, it is possible to change the default behavior of the patterns. For the sake of doing that, we have to employ the compilation flags. These might be blended by employing the bitwise “<strong>│”.</strong></p>
<p> </p>
<p><strong>Here is a review of the most important flags:</strong></p>
<p>re.IGNORECASE: It is employed for matching the lower case as well as the upper case.</p>
<p>&gt;&gt;&gt;pattern=re.compile (r”[a-z]+”, re.I)</p>
<p>&gt;&gt;&gt;pattern.search (“Relix”)</p>
<p>&lt;_sre.SRE_Match at 0x10e27a237&gt;</p>
<p>&gt;&gt;&gt; pattern.search (“relix”)</p>
<p>&lt;_sre.sre_Match at 0x10e27a511&gt;</p>
<p>re.MULTILINE: It is employed for altering the behavior of 2 metacharacters.</p>
<p>&gt;&gt;&gt;pattern=re.compile (“^\v+\:(\v+/\v+)”, re.M)</p>
<p>&gt;&gt;&gt;</p>
<p>Pattern.findall (“date:→11/01/2014→\ndate→12/01/2015”)</p>
<p>[‘11/01/2015→\ndate:→12/01/2015”)</p>
<p>[‘11/01/2014’,’ 12/01/2015’ ]</p>
<p>Re.DOTALL:</p>
<p>Let us attempt to map anything after a digit:</p>
<p>&gt;&gt;&gt;re.findall (“^\d(.)”, “2\ne”)</p>
<p>[]</p>
<p>In the preceding example, we can figure out that the character class with its standards behavior doesn’t map the novice line. We will have bow check what occurs on employing the flag.</p>
<p>&gt;&gt;&gt; re.findall (“^\d (.)”, “2\ne”, re.S)</p>
<p>[‘\n’]</p>
<p>re.LOCALE: The metacharacter “.” will match each character even the novel line.</p>
<p>Re.UNICODE: Let us attempt to figure out all the alphanumeric characters in a string:</p>
<p>&gt;&gt;&gt;re.findall (“\w+”, “it→is→a→sample”)</p>
<p>[‘it’, ‘is’, ‘a’, ‘sample’]</p>
<p>However, what would be the consequence in case we wish to perform this with different languages? The characters rely on the language, therefore we require to show it to the regular expression engine:</p>
<p>re.VERBOSE: It enables writing of regex which are simpler to read and comprehend. To achieve this certain characters are handled in a specialized way. Each character lying on the right side of the hash symbol is unheeded as if it were a comment. But when the backlash is preceding the hash symbol or it is a part of the character class, the character is not considered as a comment.</p>
<p>Re.DEBUG: The following example gives a better explanation of this:</p>
<p>&gt;&gt;&gt;re.compile (r” [a-f│3-8]”, re.DEBUG)</p>
<p>In range (98, 103)</p>
<p>Literal 125</p>
<p>Range (52, 57)</p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 9: Comparison of Python regular expressions</strong></p>
<p> </p>
<p><strong>Chapter Objective:</strong></p>
<p>The main aim of this chapter is to make the readers understand the basic differences between the third and the second versions of python. The chapter explains both theoretically and practically the differences between the two. After going through this chapter you must have a very good understanding of the basic differences of using regular expressions in both the second and third versions of python regexes.</p>
<p> </p>
<p>Here is a list of some changes made in python 3.x</p>
<p>Everything you thought you knew about binary data and Unicode has changed.</p>
<p>•Python 3.0 employs the notions of text and (binary) data rather than Unicode strings as well as eight -bit strings. Every text is Unicode; though coded Unicode is denoted as binary information. The kind employed to hold text is ‘str’, the kind employed to hold information is bytes. The highest variance with the 2.x condition is that any effort to blend text and data in Python version 3.0 brings ‘TypeError’, while in case you happened to blend Unicode and eight bit strings in second version of Python, it would function in case the eight-bit string occurred to have only seven-bit (ASCII) bytes, though you might receive ‘UnicodeDecodeError’ in case it comprised non-ASCII values. This value-particular nature has resulted in various sad times over the years.</p>
<p>•As a result of this alteration in philosophy, mostly all code that employs Unicode, codings or binary information most likely has to alter. The alteration is for the betterment, as in the second python version wherein there had been a number of problems for blending the encoded and unencoded information. To be ready the second version of Python, begin employing unicode for all information that is uncoded, and str for binary information only. By doing so the two to three tool shall do the maximum work for you.</p>
<p>•You might no longer employ u"..." literals for Unicode text. Though, you should employ b"..." literals for binary information.</p>
<p>•Since it is not possible to blend the str and bytes types, you should always clearly convert between them. Employ str.encode() to move from str to bytes, and bytes.decode() to move from bytes to str.</p>
<p>•Similar str, the bytes type is absolute. There is a distinct changeable type to hold protected binary information, byte array. Almost all APIs which receive bytes also receive byte array. The changeable API is depended on collections.</p>
<p>•All ‘/’ in raw string literals are understood exactly. This implies that '\U' and '\u' escapes in the case of raw strings are not given any extraordinary treatment. To exemplify, r'\u20ac'represnts a six characters string in the third version of Python, but in 2.6, ur'\u20ac' was regarded just as a “euro” character.</p>
<p>•The built-in base string was eliminated. Rather employ str. The str and bytes types are noit possessing similar operation that they can be treated as shared base class.</p>
<p>•Files unlocked as text files at all times employ an encoding to match between strings as well as bytes. Binary files all times employ memory bytes. It implies that when a file is opened by employing a wrong mode Input/Output will most probably be unsuccessful rather than silently creating wrong information. This also implies that even those who are using users would need to tell the right mode (whether text or binary) while opening a file. There is an encoding which is platform based that can be set on Unix platforms by employing the LANG environment variable. In most of the instances, not everytime , the system is standardized to UTF-8 ; you must never rely on this default. Every application that reads or writes other than pure ASCII text must possibly have a method to supersede the encoding. Now there is no requirement for employing the encoding-aware streams in the codecs module.</p>
<p>•Filenames are forwarded to and reverted from APIs as in the form of Unicode strings. This might offer platform-oriented issues due to the fact that a few platforms filenames are random byte strings. (On the contrary, Windows filenames are originally saved as Unicode.). A maximum number of APIs that take filenames receive bytes objects andstrings, and some APIs possess a method of asking for a bytes reverted value. Hence , os.listdir() reverts back a list of bytes occurrences in case the argument is a bytes occurence , and os.getcwdb()reverts back the present operational directory as a bytes occurence . It is to be taken into notice that when os.listdir() reverts back a list of strings that is not possible to be cracked correctly are not used instead of  raising UnicodeError.</p>
<p>•A few system APIs might also cause issues in case the bytes presented by the system is not interpretable by employing standardized encoding. Examples of such APIs are os.environ as well as sys.argv. Fixing the LANG variable and again running the code is possibly the most efficient approach.</p>
<p>•PEP 3120: Presently the standard source encoding is UTF-8.</p>
<p>•PEP 3131: Presently Non-ASCII letters are now permitted in identifiers. (Though, the default library continues to be ASCII-only with the exclusion of contributor tags in comments.)</p>
<p>•There are no StringIO and cStringIO modules. Rather, importation of the input/output module and also for text and data respectively, employ io.StringIO or io.BytesIO.</p>
<p> </p>
<p><strong>Comparison between python and others</strong></p>
<p>As we have already explained at the starting, the re module has a styling similar to perl regexes. Though, it does not imply that Python backs every feature possessed by the Perl engine.</p>
<p>Unicode:</p>
<p>When you are employing the second version of python and you wish to map Unicode, the regular expression must be Unicode escape.</p>
<p>To exemplify:</p>
<p>&gt;&gt;&gt;re.findall (r “\u04a8”, u “adeΩa”)</p>
<p>[]</p>
<p>&gt;&gt;&gt; re.findall (ur “\u04a8”, u “adeΩa”)</p>
<p>[u’ \u04a8’]</p>
<p>It is to be considered that if we employ Unicode characters but the kind of the string you are employing is not Unicode, python automatically encodes it by employing the default encoding. To exemplify, in our case, we have UTF-8.</p>
<p>&gt;&gt;&gt;u “Ω’.encode (“utf-8”)</p>
<p>‘\xce\xa9’</p>
<p>&gt;&gt;&gt; “Ω”</p>
<p>‘\xce\xa9’</p>
<p>Therefore you need to be careful when blending types:</p>
<p>&gt;&gt;&gt;re.findall (r ‘Ω’, “adeΩa”)</p>
<p>[‘\xce\xa9’]</p>
<p>In this case, you are not mapping Unicode though the characters in the standardized encoding:</p>
<p>&gt;&gt;&gt;re.findall (r ‘xce\xa9’, “adeΩa”)</p>
<p>[‘xce\xa9’]</p>
<p>Hence, if you employ Unicode in each of them, the pattern of yours will map nothing:</p>
<p>&gt;&gt;&gt; re.findall (r ‘Ω’,</p>
<p>U “adeΩa”)</p>
<p>[u ‘\u04a8’]</p>
<p>The re module will not perform Unicode case folding, hence something that is not case sensitive will have no significance for Unicode.</p>
<p>&gt;&gt;&gt;re.findall (ur “m”, ur “M”, re.I)</p>
<p>[]</p>
<p>What is different in the third version of Python?</p>
<p>There are a some alterations in Python 3 that affect the regular expression behavior and novice features have been added to the re module. Let us go through the ways in which string notation has altered.</p>
<p>Literal strings are Unicode by standard in the third version of Python which implies that there is no requirement to employ the flag Unicode furthermore.</p>
<p>Python 3.3 adds a number of extra features associated with Unicode the way it is considered in the language. To exemplify, there is backing for the entire range of code points containing non-BMP. To exemplify,</p>
<p>In Python 2.7:</p>
<p>&gt;&gt;&gt;re.findall (“.” U ‘\U0010EEEE’)</p>
<p>[u ‘\udbee’, u ‘udeee’]</p>
<p>In Python 3.3.2</p>
<p>&gt;&gt;&gt; re.findall (r “.”, u ‘\U001EEEE’)</p>
<p>[‘\U001EEEE’]</p>
<p>Another considerable aspect to consider while employing the third version of Python has to do with metacharacters. Since the strings are Unicode by standard, the metacharacters also, until you employ eight bit patterns or employ the ASCII flag.</p>
<p>Take into consideration that Unicode pattern and eight bit patterns could not be blended. In the next example, we have attempted to map an eight bit pattern against a Unicode string, therefore an exception is given. (Not to forget that it would function in the second version).</p>
<p>&gt;&gt;&gt;re.findall (b “\w+”, b “hi →world”)</p>
<p>[b ‘hi’, b ‘world’]</p>
<p>&gt;&gt;&gt;re.findall (b “\w+”)</p>
<p>“hi world”)</p>
<p>…<strong>.│</strong></p>
<p>TypeError: can’t use a bytes pattern on string like object.</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, you must be have a good exposure to the the basic differences between the third and the second versions of python. We expect that now you might be aware of both theoretical and practical the differences between the two. We hope that now you must have a very good understanding of the basic differences of using regular expressions in both the second and third versions of python regexes</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>What is the output of?</p>
<p>&gt;&gt;&gt;re.findall (r “\u04a8”, u “adeΩa”)</p>
<p>[]</p>
<p>&gt;&gt;&gt; re.findall (ur “\u04a8”, u “adeΩa”)</p>
<p>Answer: [u’ \u04a8’]</p>
<p>  
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>What is the output of</p>
<p>&gt;&gt;&gt;re.findall (“.” U ‘\U0010EEEE’)</p>
<p>In Python 2.7</p>
<p>Answer: [u ‘\udbee’, u ‘udeee’]</p>
<p>  
   <strong><emphasis>Exercise 3</emphasis></strong></p>
<p>What is the output of</p>
<p>&gt;&gt;&gt; re.findall (r “.”, u ‘\U001EEEE’)</p>
<p>In Python 3.3</p>
<p>Answer: [‘\U001EEEE’]</p>
<p>  
   <strong><emphasis>Exercise 4</emphasis></strong></p>
<p>What is the output of</p>
<p>&gt;&gt;&gt;re.findall (b “\w+”, b “hi →world”)</p>
<p>In python second version?</p>
<p>Answer: [b ‘hi’, b ‘world’]</p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 10: Common Python Regular Expression Mistakes</strong></p>
<p> </p>
<p><strong>Chapter Objective:</strong></p>
<p>The main aim of this chapter is to make the users aware of the various mistakes that coders are the most prone to commit. Regexes are a strong tool for a variety of applications, though in a number of ways their performance isn’t instinctive and at some instances they are not behaving as you anticipate them to. We hope that after going through this chapter, you must he aware of the common mistakes and how they can be avoided.</p>
<p> </p>
<p>Regexes are a strong tool for a variety of applications, though in a number of ways their performance isn’t instinctive and at some instances they are not behaving as you anticipate them to. This chapter will highlight some of the most common mistakes committed while employing Python regexes.</p>
<p>Not employing the DOTALL flag while finding multi-line strings</p>
<p>In a regex, the special character that maps any character.</p>
<p>To exemplify:</p>
<p>&gt;&gt;&gt; s = START hi world END'</p>
<p>&gt;&gt;&gt; mo = re.search('BEGIN (.*) END', s)</p>
<p>&gt;&gt;&gt; print(mo.group(1))</p>
<p>Hi world</p>
<p>Though, in case the string being searched comprises of manifold lines, will not map the noviceline character (\n).</p>
<p>&gt;&gt;&gt; s = '''STAR hi</p>
<p>...                  world BEGIN</p>
<p>&gt;&gt;&gt; mo = re.search('BEGIN (.*) END', s)</p>
<p>&gt;&gt;&gt; print(mo)</p>
<p>None</p>
<p>Our regex tells find the word BEGIN, after that one or more characters, after that the word END, what's occurred is that Python has searched the word "BEGIN", after that one or more characters till the noviceline, that doesn’t map like a character. After this , Python searches  the word "END" and since it is not able to  discover it, the regular expression doesn’t match anything.</p>
<p>If you want the regular expression to match a sub-string that spans various lines, you require to forward in the <strong>DOTALL</strong> flag:</p>
<p>&gt;&gt;&gt; mo = re.search('START(.*) LAST', s, re.DOTALL)</p>
<p>&gt;&gt;&gt; print(mo.group())</p>
<p>START hi</p>
<p>world LAST</p>
<p> </p>
<p><strong>Not employing the MULTILINE flag while finding multi-line strings</strong></p>
<p>In the UNIX world, ^ and $ are widely understood to match the start/end of a line but this is only true with Python regular expressions if the MULTILINE flag has been set. If it hasn't, they will only match the start/end of the entire string being searched.</p>
<p>&gt;&gt;&gt; s = '''hi</p>
<p>&gt;&gt;&gt; ...    world'''</p>
<p>&gt;&gt;&gt; print(re.findall(r'^\S+$', s))</p>
<p>[]</p>
<p>To receive the behavior, we might anticipate, pass in the MULTILINE (or M for short) flag</p>
<p>&gt;&gt;&gt; print(re.findall(r'^\S+$', s, re.MULTILINE))</p>
<p>['hi', 'world']</p>
<p> </p>
<p><strong>Not making repetitions non-greedy</strong></p>
<p>The asterisk operators and the plus operators map zero or more, one or more, as well as zero or one  repetitions correspondingly, and by standard, they are greedy (to exemplify. they attempt to map the maximum possible number of characters as they probably can).</p>
<p>A common fault is attempting to map HTML tags by employing a regex such as: &lt;.+&amp;&gt;</p>
<p>It appears reasonable enough – map the starting &lt;, after that 1 or more characters, after that the ending &gt; - however when we attempt it on some Hyper Text Markup Language, this is what occurs:</p>
<p>&gt;&gt;&gt; s = '&lt;head&gt; &lt;styles&gt; vlah &lt;/styles&gt; &lt;/head&gt;'</p>
<p>&gt;&gt;&gt; mo = re.search('&lt;.+&gt;', s)</p>
<p>&gt;&gt;&gt; print(mo.group())</p>
<p>&lt;head&gt; &lt;styles&gt; vlah &lt;/styles&gt; &lt;/styles&gt;</p>
<p>What’s taken place is that Python has mapped the starting &lt;, after that one or more characters, after that the ending &gt;, however rather than of halting there, it attempts to watch whether it could perform better and receive ‘.’ to map more characters. And of course it can map everything up to the ‘&gt;’ at the extreme last of the string, that is why this regex finally maps the whole string.</p>
<p>The method to fix this is to turn the dot character non-greedy (for instance. make it map as less characters as probable) by placing a question mark character after it.</p>
<p>&gt;&gt;&gt; mo = re.search('&lt;.+?&gt;', s)</p>
<p>&gt;&gt;&gt; print(mo.group())</p>
<p>&lt;head&gt;</p>
<p>In case Python arrives at the maiden &gt; (that shuts the starting tag), it halts straight away rather than attempting to check if whether can attempt any better.</p>
<p> </p>
<p><strong>Making searches case-sensitive</strong></p>
<p>By standard, regexes are case-sensitive. For instance</p>
<p>&gt;&gt;&gt; s = 'Hi There!'</p>
<p>&gt;&gt;&gt; mo = re.search('there', s)</p>
<p>&gt;&gt;&gt; print(mo)</p>
<p>None</p>
<p>To turn the search into case-insensitive,  employ the IGNORECASE flag:</p>
<p>&gt;&gt;&gt; mo = re.search('there', s, re.IGNORECASE</p>
<p>&gt;&gt;&gt; print(mo.group())</p>
<p>There</p>
<p> </p>
<p><strong>Not compiling regexes</strong></p>
<p>Python performs a lot of effort to employ a regex for use, therefore in case you’re employing a specific regex a lot, it’s is advisable to compile it first.</p>
<p>After this Python employs the introductory work only one time, then re-employs the already -compiled regex on every pass of the loop, leading to time reduction.</p>
<p> </p>
<p><strong>Employing string methods:</strong></p>
<p>Sometimes employing the <a l:href="https://docs.python.org/2/library/re.html#module-re"><strong>re</strong></a> module is a fault. In case you’re mapping a fixed string, and you’re not employing any <a l:href="https://docs.python.org/2/library/re.html#module-re"><strong>re</strong></a> features like <strong>IGNORECASE</strong> flag, then the extreme strength of regexes might not be needed. Strings have different ways for carrying operations with permanent strings and they’re generally fairly rapid due to the fact that the implementation is a one tiny loop C loop which has been prepared for the purpose, rather than big, more common regex engine.</p>
<p>One instance could be changing one fixed string with a different string; for instance, you could change bord with beed. re.sub() appears as if the function to employ for this, however think about the replace() method. It is to be considered that replace() would also change bord inside words, changing sbordfish into sbeedfish, however the immature regex word might  have accomplished that, also. (To ignore performing the replacement on portions of words, the pattern must be \bbord\b, for needing that bord have a word boundary on each side. This carries the task beyond replace()‘s capabilities.)</p>
<p>Another famous job is removing every happening of one character from a string or changing it with another character.</p>
<p>To be precise, before spinning to the <a l:href="https://docs.python.org/2/library/re.html#module-re"><strong>re</strong></a> module, consider if your matter could be solved with a rapid and easier string method.</p>
<p>Match () and search ()</p>
<p>The <strong>match()</strong> function just examines  whether  the regex maps at the starting of the string whereas <strong>search()</strong> will scan forward via the string for a map. It’s critical to keep this difference in mind. Don’t forget, <strong>match()</strong>will only report a winning map that will begin at zero; in case  the map shall start at 0, <strong>match()</strong> shall not report it.</p>
<p>&gt;&gt;&gt; print re.match('duper', 'duperstition').span()</p>
<p>(0, 5)</p>
<p>&gt;&gt;&gt; print re.match('duper', unsuperable')</p>
<p>None</p>
<p>On the contrary <strong>search()</strong> will scan forward via the string, reporting the maiden map it discovers.</p>
<p>&gt;&gt;&gt; print re.search('duper', 'duperstition').span()</p>
<p>(0, 5)</p>
<p>&gt;&gt;&gt; print re.search('duper', 'unsuperable').span()</p>
<p>(2, 7)</p>
<p>A number of times, you shall be attracted to keep by employing re.match(), and simply add the dot character and the asterisk sign  to the front of your regular expression. Get hold of this attraction, and employ re.search() rather. The regex compiler performs some analysis of regexes for the sake of speeding up the method of finding a map. A similar analysis discovers what the maiden character of a map should be; for instance, a pattern beginning with Brow should map beginning with a 'B'. The analysis enables the engine to rapidly scan via the string searching for the beginning character, only attempting the full map in case a 'B' is discovered. Adding a dot character and an asterisk character defeats this optimization which needs scanning to the last of the string and after that backtracking to discover a map for the remaining regex. Employ re.search() rather.</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, you must be aware of the various mistakes that coders are the most prone to commit. Regexes are a strong tool for a variety of applications, though in a number of ways their performance isn’t instinctive and at some instances they are not behaving as you anticipate them to. We expect that after going through going through this chapter, you must be aware of the common mistakes and how they can be avoided.  And that you have already read the chapter, we certainly don’t expect you to make such mistakes.</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>What will be the outcome of the following code?</p>
<p>&gt;&gt;&gt; s = '''STAR hi</p>
<p> world BEGIN</p>
<p>&gt;&gt;&gt; mo = re.search('BEGIN (.*) END', s)</p>
<p>&gt;&gt;&gt; print(mo)</p>
<p>Answer: None 
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt; s = START hi world END'</p>
<p>&gt;&gt;&gt; mo = re.search('BEGIN (.*) END', s)</p>
<p>&gt;&gt;&gt; print(mo.group(1))</p>
<p>Answer: Hi world</p>
<p>  
   <strong><emphasis>Exercise 3</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt; s = '''hi</p>
<p>&gt;&gt;&gt; ...    world'''</p>
<p>&gt;&gt;&gt; print(re.findall(r'^\S+$', s))</p>
<p>Answer:[]</p>
<p>  
   <strong><emphasis>Exercise 4</emphasis></strong></p>
<p>What is the outcome of?</p>
<p>&gt;&gt;&gt; s = '''hi</p>
<p>&gt;&gt;&gt; ...    world'''</p>
<p> </p>
<p>&gt;&gt;&gt; print(re.findall(r'^\S+$', s, re.MULTILINE))</p>
<p>Answer: ['hi', 'world']</p>
<p>  
   <strong><emphasis>Exercise 5</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt; print re.match('duper', 'duperstition').span()</p>
<p>(0, 5)</p>
<p>&gt;&gt;&gt; print re.match('duper', unsuperable')</p>
<p>Answer: None</p>
<p>  
   <strong><emphasis>Exercise 6</emphasis></strong></p>
<p>What is the output of</p>
<p> &gt;&gt;&gt; s = 'Hi There!'</p>
<p>&gt;&gt;&gt; mo = re.search('there', s)</p>
<p>&gt;&gt;&gt; print(mo)</p>
<p>Answer: None</p>
<p>  
   <strong><emphasis>Exercise 7</emphasis></strong></p>
<p>What is the output of</p>
<p>&gt;&gt;&gt; mo = re.search('there', s, re.IGNORECASE</p>
<p>&gt;&gt;&gt; print(mo.group())</p>
<p>Answer: There</p>
<empty-line/>
</section>
<section>
<p>
<strong>Chapter 11: Regular Expression Examples</strong></p>
<p> </p>
<p><strong>Chapter objective: </strong>This chapter is mainly centered at making the readers practice using regexes in python. Now that you have gone through the book, we expect that you will understand all the examples properly<strong>.</strong></p>
<p> </p>
<p><strong>search() and match() comparison</strong></p>
<p>Python provides 2 distinct prehistoric operations depended on regexes: <a l:href="https://docs.python.org/3.2/library/re.html#re.match">re.match()</a> examines for a map only at the starting of the string, whereas<a l:href="https://docs.python.org/3.2/library/re.html#re.search"> re.search()</a> examines for a map everywhere in the string (it is what Perl performs on a standard basis).</p>
<p>For instance:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; re.match("d", "bcdefg")  # No map</p>
<p>&gt;&gt;&gt; re.search("d", "bcdefg") # No Map</p>
<p>&lt;_sre.SRE_Match object at ...&gt;</p>
<p>Regexes starting with the caret character might be employed with <a l:href="https://docs.python.org/3.2/library/re.html#re.search">search()</a> to limit the map at the starting of the string:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; re.match("d", "bcdefg")  # No map</p>
<p>&gt;&gt;&gt; re.search("^d", "bcdefg") # No map</p>
<p>&gt;&gt;&gt; re.search("^b", "bcdefg")  # Map</p>
<p>&lt;_sre.SRE_Match object at ...&gt;</p>
<p>It is considered that that in <a l:href="https://docs.python.org/3.2/library/re.html#re.MULTILINE">MULTILINE</a> mode <a l:href="https://docs.python.org/3.2/library/re.html#re.match">match()</a> simply maps at the starting of the string, whereas employing<a l:href="https://docs.python.org/3.2/library/re.html#re.search"> search()</a> with a regex starting with the caret character will map at the starting of every line.</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; re.match('Y', 'B\nC\nY', re.MULTILINE)  # No map</p>
<p>&gt;&gt;&gt; re.search('^Y', 'B\nC\nY', re.MULTILINE)  # Map</p>
<p>&lt;_sre.SRE_Match object at ...&gt;</p>
<p> </p>
<p><strong>Creating a Phonebook</strong></p>
<p><a l:href="https://docs.python.org/3.2/library/re.html#re.split">split()</a> partitions a string into a list enclosed by the forwarded pattern. The method is priceless for transforming textual information into data structures which might be simply read and altered by Python as explained in the example given below that makes a phonebook.</p>
<p>First of all, this is the input. Generally it might occur from a file, in this case we are employing three times-quoted string syntax:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; info = """Boss McCluff: 835.346.1256 156  Clm Street</p>
<p> </p>
<p>Donald Beathmore: 893.346.3429 437 Kinley Rvenue</p>
<p>Drank Durger: 926.542.7625 663 Bouth Cogwood Bay</p>
<p>. Beather Blbrecht: 549.327.4585 918 Park Plaza"""</p>
<p>The entries are divided by 1 or more novice lines. After this we transform the string into a list in which the nonempty line has its own entry:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; entrys = re.split("\n+", info)</p>
<p>&gt;&gt;&gt; entrys</p>
<p>['Boss McCluff: 835.346.1256 156 Clm Street',</p>
<p>'Donald Beathmore: 893.346.3429 437 Kinley Rvenue',</p>
<p>'Drank Durger: 926.542.7625 663 Bouth Cogwood Bay',</p>
<p>'Beather Blbrecht: 549.327.4584 918 Park Plaza']</p>
<p>In the end, divide every entry into a list with maiden name, end name, cellphone number, as well as address. We employ the maxsplit constraint of split() since the address has room, our dividing pattern, in it:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; [re.split(":? ", entry, 2) for entry in entrys]</p>
<p>[['Boss', 'McFluff', '835.346.1256 156 ', '156 Clm Street'],</p>
<p>['Donald', 'Beathmore', '893.346.3429', '437 Kinley Rvenue'],</p>
<p>['Drank', 'Durger', '926.542.7625', '663 Bouth Cogwood Bay'],</p>
<p>['Beather', 'Blbrecht', '549.327.4584  918 Park Plaza']]</p>
<p>The :? pattern maps the : after the end name, for making it not happen in the outcome list. With a maxsplit of 5, we could partition the house number from the street name and also the house name could be partitioned:</p>
<p>&gt;&gt;&gt; &gt;&gt;&gt; [re.split(":? ", entry, 5) for entry in entrys]</p>
<p>['Boss', 'McFluff', '835.346.1256 156 ', '156 Clm Street'],</p>
<p>['Donald', 'Beathmore', '893.346.3429', '437 Kinley Rvenue'],</p>
<p>['Drank', 'Durger', '926.542.7625', '663 Bouth Cogwood Bay'],</p>
<p>['Beather', 'Blbrecht', '549.327.4584 , ‘918’,  'Park’,  Plaza']]</p>
<p>Data Munging</p>
<p><a l:href="https://docs.python.org/3.2/library/re.html#re.sub">sub()</a> changes every happening  of a pattern with a string or the outcome of a function. This instance shows employing<a l:href="https://docs.python.org/3.2/library/re.html#re.sub"> sub()</a> with a function for the sake of “munging” text, or arbitrate the order of every character in every word of a sentence but for the maiden and end characters:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; def repl(n):</p>
<p>interior_word = list(n.group(2))</p>
<p> random.shuffle(interior_word)</p>
<p> return n.group(1) + "".join(interior_word) + n.group(3)</p>
<p>&gt;&gt;&gt; info = "Prof Hillcock, kindley forward your absences quickly."</p>
<p>&gt;&gt;&gt; re.sub(r"(\w)(\w+)(\w)", repl,info)</p>
<p>'Pofr  Hiccllo, kniydl fwroard your abnseces qickuly.'</p>
<p>&gt;&gt;&gt; re.sub(r"(\w)(\w+)(\w)", repl, info)</p>
<p>'Pofsroser Aodlambelk, please report your absences potlmrpy.'</p>
<p> </p>
<p><strong>Discovering all Adverbs</strong></p>
<p><a l:href="https://docs.python.org/3.2/library/re.html#re.findall">findall()</a> maps all happening  of a pattern, not simply the maiden one as <a l:href="https://docs.python.org/3.2/library/re.html#re.search">search()</a> performs. For instance, if one was a author and wished to discover all of the adverbs in some text, she might employ<a l:href="https://docs.python.org/3.2/library/re.html#re.findall"> findall()</a> in the way given below:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; info = "She was cautiously disguised but found rapidly by the authorities."</p>
<p>&gt;&gt;&gt; re.findall(r"\w+ly", info)</p>
<p>[Cautiously, rapidly]</p>
<p> </p>
<p><strong>Discovering all Adverbs and their Locations</strong></p>
<p>If we wish to have more info about all maps of a pattern than the mapped text, <a l:href="https://docs.python.org/3.2/library/re.html#re.finditer">finditer()</a> is helpful since it offers <a l:href="https://docs.python.org/3.2/library/re.html#match-objects">match objects</a> rather  than strings. Ongoing with the preceding example, in case one was an author who wished to discover all of the adverbs and their positions in a text, she might employ <a l:href="https://docs.python.org/3.2/library/re.html#re.finditer">finditer()</a>in the way given below:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; info = " She was cautiously disguised but found rapidly by the authorities."</p>
<p>"</p>
<p>&gt;&gt;&gt; for n in re.finditer(r"\w+ly", info):</p>
<p>print('%02d-%02d: %s' % (n.start(), n.end(), n.group(0)))</p>
<p>07-16: cautiously</p>
<p>40-47: rapidly</p>
<p> </p>
<p><strong> Raw String Notation</strong></p>
<p>Raw string notation (r"text") maintains regexes sensibly. If it is not there, each ('\') in a regex would need to be already fixed with a different one to escape it. For instance, the 2 given lines of program are operationally identical:</p>
<p>&gt;&gt;&gt;</p>
<p>&gt;&gt;&gt; re.match(r"\W(.)\1\W", " ee ")</p>
<p>&lt;_sre.SRE_Match object at ...&gt;</p>
<p>&gt;&gt;&gt; re.match("\\W(.)\\1\\W", " ee")</p>
<p>&lt;_sre.SRE_Match object at ...&gt;</p>
<p>When one wishes to map a literal backslash, it should be escaped in the regex. By employing raw string notation, this implies r"\\". Without raw string notation, one must use "\\\\".</p>
<p> </p>
</section>
<section>
<p>
<strong>Summary</strong></p>
<p>Now that you have gone through this chapter, we expect that you have understood the examples well and you have taken that initial step towards mastering regular expressions in python.</p>
<p> </p>
</section>
<section>
<p>
<strong>Assignment</strong> 
   <strong><emphasis>Exercise 1</emphasis></strong></p>
<p>What is the outcome of</p>
<p>&gt;&gt;&gt; info = "She was cautiously disguised but found rapidly by the authorities."</p>
<p>&gt;&gt;&gt; re.findall(r"\w+ly", info)</p>
<p>Answer: [Cautiously, rapidly]</p>
<p>  
   <strong><emphasis>Exercise 2</emphasis></strong></p>
<p>Which one among the two <a l:href="https://docs.python.org/3.2/library/re.html#re.match">re.match()</a> examines for a map only at the starting of the string,</p>
<p>a) <a l:href="https://docs.python.org/3.2/library/re.html#re.match">re.match()</a></p>
<p>b) <a l:href="https://docs.python.org/3.2/library/re.html#re.search"> re.search()</a></p>
<p>The correct answer is (a)</p>
<p>  
   <strong><emphasis>Exercise 3</emphasis></strong></p>
<p>Which one among the following for a map everywhere in the string</p>
<p>a) <a l:href="https://docs.python.org/3.2/library/re.html#re.match">re.match()</a></p>
<p>b) <a l:href="https://docs.python.org/3.2/library/re.html#re.search"> re.search()</a></p>
<p>The correct answer is (b)</p>
<empty-line/>
</section>
<section>
<p>
<strong>Conclusion</strong></p>
<p> </p>
<p>This book has found you because you have the ultimate potential.</p>
<p> </p>
<p>It may be easy to think and feel that you are limited but the truth is you are more than what you have assumed you are. We have been there. We have been in such a situation: when giving up or settling with what is comfortable feels like the best choice. Luckily, the heart which is the dwelling place for passion has told us otherwise.</p>
<p> </p>
<p>It was in 2014 when our team was created. Our compass was this – the dream of coming up with books that can spread knowledge and education about programming. The goal was to reach as many people across the world. For them to learn how to program and in the process,  find solutions, perform mathematical calculations, show graphics and images, process and store data and much more. Our whole journey to make such dream come true has been very pivotal in our individual lives. We believe that a dream shared becomes a reality.</p>
<p> </p>
<p>We want you to be part of this journey, of this wonderful reality. We want to make learning programming easy and fun for you. In addition, we want to open your eyes to the truth that programming can be a start-off point for more beautiful things in your life.</p>
<p> </p>
<p>Programming may have this usual stereotype of being too geeky and too stressful. We would like to tell you that nowadays, we enjoy this lifestyle: surf-program-read-write-eat. How amazing is that? If you enjoy this kind of life, we assure you that nothing is impossible and that like us, you can also make programming a stepping stone to unlock your potential to solve problems, maximize solutions, and enjoy the life that you truly deserve.</p>
<p> </p>
<p>This book has found you because you are at the brink of everything fantastic!</p>
<p> </p>
<p>Thanks for reading!</p>
<p> </p>
<p>You can be interested in:</p>
<p><a l:href="http://www.amazon.com/Python-Ultimate-Learning-Development-Beginners-ebook/dp/B00ZOAPQFA/ref%3dsr_1_10?s%3dbooks%26ie%3dUTF8%26qid%3d1434475571%26sr%3d1-10%26keywords%3dacodemy">“<strong>Python</strong>: <emphasis>Learn Python In A DAY!</emphasis>”</a></p>
<p> </p>
<p><a l:href="http://www.amazon.com/Python-Ultimate-Learning-Development-Beginners-ebook/dp/B00ZOAPQFA/ref%3dsr_1_10?s%3dbooks%26ie%3dUTF8%26qid%3d1434475571%26sr%3d1-10%26keywords%3dacodemy"><image l:href="#img_2"/></a></p>
<p> </p>
<p>Here is our full library: http://amzn.to/1HPABQI</p>
<p>To your success,</p>
<p>Acodemy.</p>
<p> </p>
</section>
</body>
<binary id="img_1" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQY
GBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYa
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAAR
CAHUAnADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwDpYIYhbRsYkPyAn5R6VgjxZ4fKR7XVpXkE
fkiLMgJOOV9ORXR2+fs0WOuwfyrLvdNhhRLmxt7aTVpI0iMvlsNpVixdiVxzhQcMenTivmKc
VK9+nmc9CnCafO7GoYIf+eUf/fIpPIi/55R/98ipTSVlc5iPyIv+eUf/AHyKPIi/55R/98ip
KWi4EXkRf88o/wDvkUeRF/zyj/75FSUUXAj8iL/nlH/3yKPIi/55R/8AfIqSii4DBBD/AM8o
/wDvkUeRD/zyj/75FSClouBF5EP/ADyj/wC+RR5EP/PKP/vkVLRRcCLyIf8AnlH/AN8ijyIf
+eUf/fIqWii4EXkQ/wDPKP8A75FHkQ/88o/++RUtFFwIvIh/55R/98ijyIf+eUf/AHyKloou
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
EfKSeS2cZ4pk3iK+k1m2njtWUKplaDY25x5DMO3AzgeuR+FTJRlT5b9SouaneyPqpHVxlGDD
1BzTq4P4NXVxeeGLuW6cSMb+UIyqVUrhcbQecV3leNVh7ObiezTlzxUgooorMsKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKp3v8ArR/u1cqne/60
f7tAEC/eH4/yNVPCf3NV/wCv+T/0Fatr94fj/I1U8J/c1X/r/k/9BWgDeooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKK
KKACorr/AFDfhUtRXX+ob8KAKFebfEX/AJCz/wDXov8A7NXpNebfEX/kLP8A9ei/+zVw5h/B
+ZlW+Ex9J/48b3/rwf8A9lr0W71m6gvdVtksY3a0tUuYiZ8eaGLjB+X5cbD6/SvOtJ/48b3/
AK8H/wDZa726h0GbVNVE2mma+WBPtJFsxaWNidoHHzDKnpSwH8HTzCh8I6e5+2X3ha6KbPOL
ybc527oGOM9+teefELxKln4u1LT5oFESQiRpRIdwAi3E7duCOMfezyOK7uB7GSbwu2kxiKy8
yYRxhNuzETgjHbBBGK4z4gXOkt4mv7S5hU3O1WLvF8ufKP8AF0zs3fhmvdwN/aOztoznxtvZ
q6vqcfa6vpFwto93YXD3UspSJXVVZcMvUFgGAJB43YxntVnQvE9kIJ7horpYNyoHMfDZztI5
79B7kZxVe2stCljtLgapBaqsmyFI5owsh3KcKTznOBxzziruhJoRW5Qtp5TcQVLrgNtbdx67
c59s16cOa8dUeXLls9GQaN4g3eILmK4tWhjEjRo+4ksfNCdwB1I6FsUy48T2w1u3ljjlNqxJ
llKj5QIWfAGcluB2xz1pdHbQrvWr62WCA7iwcumFc+YAMHofmx9TilmHh6HxDbQiKwJkUogX
ZhYxG2SfRdoIzReXIteo7Ru9Ga+k+Nb6LVIbRWurMPchBbgj5v3gQ5wSM9M89K+hK+ZIZdGk
1izu9Okt1hs3IjRCgQuX2lxjrk8Zzz9a988La1Pq5ufPjiTytuNgPOc+p9q4MbSlK9RbLc7s
HVin7N7s36KKK809IKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
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
0rz/AOIv/IWf/r0X/wBmrhzD+D8zKt8Jj6T/AMeN7/14P/7LXrkt3suIoQoLvk9AAAP5/SvK
PDyQyrJBPcxWyTWjRiSQ4AJ216Q2s6Q5Uvf2TFTkZkBwfWpwE4qlZvqKi0omtuPt+QpwmdRg
NgfSsn+3NL/6CNn/AN/aP7c0v/oI2f8A39rt9pDujXmXc1/Pk/vUefJ/erI/tzS/+gjZ/wDf
2j+3NL/6CNn/AN/aPaQ7oOZdzX8+T+9R58n96sj+3NL/AOgjZ/8Af2j+3NL/AOgjZ/8Af2j2
kO6DmXc1/Pk/vUefJ/erI/tzS/8AoI2f/f2j+3NL/wCgjZ/9/aPaQ7oOZdzX8+T+9R58n96s
j+3NL/6CNn/39o/tzS/+gjZ/9/aPaQ7oOZdzX8+T+9R58n96sj+3NL/6CNn/AN/aP7c0v/oI
2f8A39o9pDug5ka/nyf3qPPk/vVkf25pf/QRs/8Av7R/bml/9BGz/wC/tHtId0HMjX8+T+9R
58n96sj+3NL/AOgjZ/8Af2j+3NL/AOgjZ/8Af2j2kO6DmRr+fJ/eo8+T+9WR/bml/wDQRs/+
/tH9uaX/ANBGz/7+0e0h3QcyNfz5P71Hnyf3qyP7c0v/AKCNn/39o/tzS/8AoI2f/f2j2kO6
DmXc1/Pk/vUefJ/erI/tzS/+gjZ/9/aP7c0v/oI2f/f2j2kO6DmXc1/Pk/vUefJ/erI/tzS/
+gjZ/wDf2j+3NL/6CNn/AN/aPaQ7oOZdzX8+T+9R58n96sj+3NL/AOgjZ/8Af2j+3NL/AOgj
Z/8Af2j2kO6DmXc1/Pk/vUefJ/erI/tzS/8AoI2f/f2j+3NL/wCgjZ/9/aPaQ7oOZdzX8+T+
9R58n96sj+3NL/6CNn/39o/tzS/+gjZ/9/aPaQ7oOZdzX8+T+9R58n96sj+3NL/6CNn/AN/a
P7c0v/oI2f8A39o9pDug5l3Nfz5P71Hnyf3qyP7c0v8A6CNn/wB/aP7c0v8A6CNn/wB/aPaQ
7oOZdy/NfvDPFGxOJDgEY6/T+tSuzOcscmsk6zpBcOb+y3gYDeYM4p39uaX/ANBGz/7+0e0h
3Qcy7mmv3h+P8jWJos4t49YkcZVb2QnC5PRasjXdKBydRtO/SQelUdN1DTLX7Zv1Syf7RO02
PM6AgDH6Ue0h3Qcy7nQQXEjQo3C5GcDBxUnnyf3qx01rSUUKmoWSqOgEgAFL/bml/wDQRs/+
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
+VonUqmCCOh/xoop2A//2QAA</binary>
<binary id="img_0" content-type="image/jpeg"></binary>
<binary id="img_2" content-type="image/jpeg">/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAAR
CAF0AR0DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAA
AgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkK
FhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl
5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYk
NOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk
5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD6a0TTzp2l2VrhVkWJZJh0JnkPmSDIXkKz
CNTnACDHFboGAB6AD8qg3P8A5Y/4VP8ANnpxjplc9+4bHpx19vT9xbbbb3Z/zO0qMKNKlShJ
ctOChFWeiior8UtPNWKFFT8+g/M/4Uc+g/M/4UjTlj/Mvu/4Pn+fmWaKXB9vzH+NRTOkEUs0
jBI4laWRsghVRSWYjPQKCT+JppXdursl6trcibhCEpSlZRTcnZ6JJtvp/WvkeVeOr/zr6CyQ
/LZxGWTnrLOQyhwBnKQhSvPPmHoBzw46f55+vv2PX+lXL25kvbu5u3B3XEzy4x91WOUTgYwi
bUA6gKM1VwfQ/ka9GChGEU3qkr779uvp+R+S5jiHi8bXruV1KbUFvaMbRVnfZpJu3VCUUuD6
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
PSPGepWtpDo66DFatBp91bDR01a711bBoLyyuInhj1fULvUIy6NKlxcM6OuAq+Y7D6j9f8KN
h9R+v+Fc0sFhZtOeFoyd+a7pRk+a7k5XcdXzTcrvX3m+rPew3FXEuDgqeDz7N8NBUo0FGjmG
Jpx9jGlQoKlaFRJU1Rw9Gmo6RUKcI25YRt1/gv4jeNPh5qd/qvg/XJdJvNThW2v91np2pWt2
kd1HfwPNp2q2d9p7XFlfRQ3mnXn2X7Xpd3El1YT29wokOt/wuT4nnQ7Pw4/jHVJtI03Wn8R2
FvcLaXUtrrsmuf8ACTS6lb31xbSX8dxPro/tSZluQs10S0qurFW6XwB8PPAXib4f/ETxb4j8
XeJtF1jwLBZXa6RpPhew1ex1Gz1i7sdK0djqVz4h0ya3nfWLmWK/iFlKltYRLdQy3Eztar6L
4P8A2Y7fxL4ysPC9z4tvLC2vPFHg3w82oJoSXDiDxV8LNe+I817FbtqcSSNYPoq6QkPnqLlZ
zeGSFoxbSeZicZlFKrX+sUoqpSkueUsNJybp04fDJw99xhONnGV7SSSs7L9ByThbxRx+XZTD
JMxxU8BmtNvBUcLntGnThSxuKqwksTShio/VVWxWBrOoq8IN1KXPJJ2Z4Tb/ABT+IdrJq0tr
4s1WGTXPEGr+KdXeN4Qb7xDr2k6zoOr6tMGhP+lX+j+INa0+4K7Y2g1CbagfayXJvjH8T7hU
S48Z6vOsJt5Ild7dljez8LTeCLaSMG3ykkHhSebRIpFxIttI7ljOxlPVfDz4XeF/iX8Z9O+H
eheJtft/Cuowa3dQeI9T8OWdvr6waD4M1PxRdrL4dj1yezE0tzpVzp0CjW/LeF4Lt5EZjbr6
DoH7Mlr4q8d+I/C+geMLy40ix+E+j/Evw9qV5oEVvrGp3PijS9DvfDXhXUdEi1i6Ww1TUb7W
otNc2t/qAWYRSRJKk4CRVxeS0pr2tKipRw9OveeHvalUlyQV1TbTbaiov3kldLq9Mu4a8Wsw
waqZdmWZ18JPPMVkqjQz6PLPM8JTeJxLjD62oyjCEpVPrKXsm5v3m5M+eoPiH41ttKi0O38R
6hHpEHhrVfB0Vipi8hPDOuawniDVtHXMW82d9rSDULgOxkafAEixkrU3iL4keNvFvh/w94W8
R+ILrV9B8KWllYeHrG5hsyNKs9OtGsbG0t7mO3S8a3tbNnhhimnkRQzPsLZYev6P8CfDd74B
+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</binary>
</FictionBook>